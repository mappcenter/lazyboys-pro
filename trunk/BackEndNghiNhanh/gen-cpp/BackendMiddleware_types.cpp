/**
 * Autogenerated by Thrift Compiler (0.9.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "BackendMiddleware_types.h"

#include <algorithm>

namespace BackendMiddleware {

const char* Tag::ascii_fingerprint = "2304AA70C6D0202BE23C422134FF450B";
const uint8_t Tag::binary_fingerprint[16] = {0x23,0x04,0xAA,0x70,0xC6,0xD0,0x20,0x2B,0xE2,0x3C,0x42,0x21,0x34,0xFF,0x45,0x0B};

uint32_t Tag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagID);
          this->__isset.tagID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagName);
          this->__isset.tagName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->viewCounts);
          this->__isset.viewCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateAdd);
          this->__isset.dateAdd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateUpdate);
          this->__isset.dateUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Tag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Tag");

  xfer += oprot->writeFieldBegin("tagID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->tagName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewCounts", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->viewCounts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateAdd", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->dateAdd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateUpdate", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->dateUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Tag &a, Tag &b) {
  using ::std::swap;
  swap(a.tagID, b.tagID);
  swap(a.tagName, b.tagName);
  swap(a.viewCounts, b.viewCounts);
  swap(a.dateAdd, b.dateAdd);
  swap(a.dateUpdate, b.dateUpdate);
  swap(a.__isset, b.__isset);
}

const char* Item::ascii_fingerprint = "FD9C9D8A74A290A49728D3BAB8A4E6D0";
const uint8_t Item::binary_fingerprint[16] = {0xFD,0x9C,0x9D,0x8A,0x74,0xA2,0x90,0xA4,0x97,0x28,0xD3,0xBA,0xB8,0xA4,0xE6,0xD0};

uint32_t Item::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->itemID);
          this->__isset.itemID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->tagsID.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->tagsID.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->tagsID[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.tagsID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->viewCounts);
          this->__isset.viewCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->likeCounts);
          this->__isset.likeCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dislikeCounts);
          this->__isset.dislikeCounts = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateAdd);
          this->__isset.dateAdd = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dateUpdate);
          this->__isset.dateUpdate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Item::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Item");

  xfer += oprot->writeFieldBegin("itemID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->itemID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tagsID", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->tagsID.size()));
    std::vector<std::string> ::const_iterator _iter5;
    for (_iter5 = this->tagsID.begin(); _iter5 != this->tagsID.end(); ++_iter5)
    {
      xfer += oprot->writeString((*_iter5));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("viewCounts", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->viewCounts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("likeCounts", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->likeCounts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dislikeCounts", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->dislikeCounts);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateAdd", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->dateAdd);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dateUpdate", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->dateUpdate);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Item &a, Item &b) {
  using ::std::swap;
  swap(a.itemID, b.itemID);
  swap(a.content, b.content);
  swap(a.tagsID, b.tagsID);
  swap(a.viewCounts, b.viewCounts);
  swap(a.likeCounts, b.likeCounts);
  swap(a.dislikeCounts, b.dislikeCounts);
  swap(a.dateAdd, b.dateAdd);
  swap(a.dateUpdate, b.dateUpdate);
  swap(a.__isset, b.__isset);
}

const char* ItemTag::ascii_fingerprint = "25702B8D5E28AA39160F267DABBC8446";
const uint8_t ItemTag::binary_fingerprint[16] = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

uint32_t ItemTag::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tagID);
          this->__isset.tagID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->itemsID.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->itemsID.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += iprot->readString(this->itemsID[_i10]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.itemsID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ItemTag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("ItemTag");

  xfer += oprot->writeFieldBegin("tagID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->tagID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemsID", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->itemsID.size()));
    std::vector<std::string> ::const_iterator _iter11;
    for (_iter11 = this->itemsID.begin(); _iter11 != this->itemsID.end(); ++_iter11)
    {
      xfer += oprot->writeString((*_iter11));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ItemTag &a, ItemTag &b) {
  using ::std::swap;
  swap(a.tagID, b.tagID);
  swap(a.itemsID, b.itemsID);
  swap(a.__isset, b.__isset);
}

const char* User::ascii_fingerprint = "343DA57F446177400B333DC49B037B0C";
const uint8_t User::binary_fingerprint[16] = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

uint32_t User::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userID);
          this->__isset.userID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userToken);
          this->__isset.userToken = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->userRole);
          this->__isset.userRole = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t User::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("User");

  xfer += oprot->writeFieldBegin("userID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userToken", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->userToken);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("userRole", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->userRole);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(User &a, User &b) {
  using ::std::swap;
  swap(a.userID, b.userID);
  swap(a.userToken, b.userToken);
  swap(a.userRole, b.userRole);
  swap(a.__isset, b.__isset);
}

const char* UserFeedBack::ascii_fingerprint = "34668B1D16D71B25479C61503EAC3D32";
const uint8_t UserFeedBack::binary_fingerprint[16] = {0x34,0x66,0x8B,0x1D,0x16,0xD7,0x1B,0x25,0x47,0x9C,0x61,0x50,0x3E,0xAC,0x3D,0x32};

uint32_t UserFeedBack::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->userID);
          this->__isset.userID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->itemsLike.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->itemsLike.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->itemsLike[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.itemsLike = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->itemsDislike.clear();
            uint32_t _size17;
            ::apache::thrift::protocol::TType _etype20;
            xfer += iprot->readListBegin(_etype20, _size17);
            this->itemsDislike.resize(_size17);
            uint32_t _i21;
            for (_i21 = 0; _i21 < _size17; ++_i21)
            {
              xfer += iprot->readString(this->itemsDislike[_i21]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.itemsDislike = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->favouriteItems.clear();
            uint32_t _size22;
            ::apache::thrift::protocol::TType _etype25;
            xfer += iprot->readListBegin(_etype25, _size22);
            this->favouriteItems.resize(_size22);
            uint32_t _i26;
            for (_i26 = 0; _i26 < _size22; ++_i26)
            {
              xfer += iprot->readString(this->favouriteItems[_i26]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.favouriteItems = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UserFeedBack::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UserFeedBack");

  xfer += oprot->writeFieldBegin("userID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->userID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemsLike", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->itemsLike.size()));
    std::vector<std::string> ::const_iterator _iter27;
    for (_iter27 = this->itemsLike.begin(); _iter27 != this->itemsLike.end(); ++_iter27)
    {
      xfer += oprot->writeString((*_iter27));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("itemsDislike", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->itemsDislike.size()));
    std::vector<std::string> ::const_iterator _iter28;
    for (_iter28 = this->itemsDislike.begin(); _iter28 != this->itemsDislike.end(); ++_iter28)
    {
      xfer += oprot->writeString((*_iter28));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("favouriteItems", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->favouriteItems.size()));
    std::vector<std::string> ::const_iterator _iter29;
    for (_iter29 = this->favouriteItems.begin(); _iter29 != this->favouriteItems.end(); ++_iter29)
    {
      xfer += oprot->writeString((*_iter29));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UserFeedBack &a, UserFeedBack &b) {
  using ::std::swap;
  swap(a.userID, b.userID);
  swap(a.itemsLike, b.itemsLike);
  swap(a.itemsDislike, b.itemsDislike);
  swap(a.favouriteItems, b.favouriteItems);
  swap(a.__isset, b.__isset);
}

} // namespace
