/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef BackendMiddleware_H
#define BackendMiddleware_H

#include <thrift/TDispatchProcessor.h>
#include "BackendMiddleware_types.h"

namespace BackendMiddleware {

class BackendMiddlewareIf {
 public:
  virtual ~BackendMiddlewareIf() {}
  virtual int64_t itemdbSize() = 0;
  virtual int64_t tagdbSize() = 0;
  virtual int64_t itemtagdbSize() = 0;
  virtual int64_t itemtagSize(const std::string& tagID) = 0;
  virtual int64_t userdbSize() = 0;
  virtual int64_t itemsLikeSize(const std::string& userID) = 0;
  virtual int64_t itemsDislikeSize(const std::string& userID) = 0;
  virtual int64_t favouriteItemsSize(const std::string& userID) = 0;
  virtual void getAllTag(std::vector<Tag> & _return) = 0;
  virtual bool insertTag(const std::string& tagName) = 0;
  virtual bool deleteTag(const std::string& tagID) = 0;
  virtual bool deleteAllTag(const std::vector<std::string> & tagIDs) = 0;
  virtual bool editTag(const std::string& tagID, const std::string& tagName) = 0;
  virtual void getTag(Tag& _return, const std::string& tagID) = 0;
  virtual void setViewCountTag(const std::string& tagID) = 0;
  virtual void getTopTags(std::vector<Tag> & _return, const int64_t number) = 0;
  virtual void getTagKeyword(std::vector<Tag> & _return, const std::string& keyWord) = 0;
  virtual void getAllItems(std::vector<Item> & _return, const int64_t number) = 0;
  virtual void getItemFromItemID(Item& _return, const std::string& itemID) = 0;
  virtual void getItemsFromListItemID(std::vector<Item> & _return, const std::vector<std::string> & itemIDs) = 0;
  virtual void getAllItemshaveTag(std::vector<Item> & _return, const std::string& tagID, const int32_t numberItems) = 0;
  virtual void pagingItemsTag(std::vector<Item> & _return, const std::string& tagID, const int32_t pageNumber, const int32_t numberItems) = 0;
  virtual void getAllItemsIDhaveTag(std::vector<std::string> & _return, const std::string& tagID, const int32_t numberItemsID) = 0;
  virtual void getRandomItem(Item& _return) = 0;
  virtual void getRandomItemhaveTag(Item& _return, const std::string& tagID) = 0;
  virtual void increaseViewCountItem(const std::string& itemID) = 0;
  virtual void increaseLikeCountItem(const std::string& itemID) = 0;
  virtual void increaseDislikeCountItem(const std::string& itemID) = 0;
  virtual void insertItem(std::string& _return, const std::string& content, const std::vector<std::string> & tagIDs) = 0;
  virtual bool deleteItem(const std::string& itemID) = 0;
  virtual bool deleteAllItem(const std::vector<std::string> & itemIDs) = 0;
  virtual bool editItem(const std::string& itemID, const std::string& newItemValue, const std::vector<std::string> & newTagIDs) = 0;
  virtual void getItemsPage(std::vector<Item> & _return, const int64_t pageNumber, const int64_t itemNumber, const std::string& tagID) = 0;
  virtual void getItemKeyword(std::vector<Item> & _return, const std::string& keyWord) = 0;
  virtual void getItemsPageKeyword(std::vector<Item> & _return, const std::string& keyWord, const int64_t pageNumber, const int64_t itemNumber) = 0;
  virtual void getItemKeywordTag(std::vector<Item> & _return, const std::string& keyWord, const std::string& tagID) = 0;
  virtual void getTopItems(std::vector<Item> & _return, const int64_t number) = 0;
  virtual void getTopItemsofTag(std::vector<Item> & _return, const int64_t number, const std::string& tagID) = 0;
  virtual void getFavouriteItems(std::vector<Item> & _return, const std::string& userID, const int64_t number) = 0;
  virtual void getFavouriteItemsofTag(std::vector<Item> & _return, const std::string& userID, const int64_t number, const std::string& tagID) = 0;
  virtual bool insertFavouriteItem(const std::string& userID, const std::string& itemID) = 0;
  virtual bool deleteFavouriteItem(const std::string& userID, const std::string& itemID) = 0;
  virtual void getAllItemsIDLike(std::vector<std::string> & _return, const std::string& userID) = 0;
  virtual void getAllItemsLike(std::vector<Item> & _return, const std::string& userID, const int32_t number) = 0;
  virtual bool insertLikedItem(const std::string& userID, const std::string& itemID) = 0;
  virtual bool deleteLikedItem(const std::string& userID, const std::string& itemID) = 0;
  virtual void getAllItemsIDDislike(std::vector<std::string> & _return, const std::string& userID) = 0;
  virtual void getAllItemsDislike(std::vector<Item> & _return, const std::string& userID, const int32_t number) = 0;
  virtual bool insertDislikedItem(const std::string& userID, const std::string& itemID) = 0;
  virtual bool deleteDislikedItem(const std::string& userID, const std::string& itemID) = 0;
  virtual bool userExisted(const std::string& userID) = 0;
  virtual bool blockUser(const std::string& userID) = 0;
  virtual bool unblockUser(const std::string& userID) = 0;
  virtual bool addUser(const std::string& userID, const std::string& userToken, const int32_t userRole) = 0;
  virtual bool deleteUser(const std::string& userID) = 0;
  virtual bool editUser(const std::string& userID, const std::string& userToken, const int32_t userRole) = 0;
  virtual bool deleteAllUser() = 0;
  virtual void getUser(User& _return, const std::string& userID) = 0;
  virtual void getAllUser(std::vector<std::string> & _return) = 0;
};

class BackendMiddlewareIfFactory {
 public:
  typedef BackendMiddlewareIf Handler;

  virtual ~BackendMiddlewareIfFactory() {}

  virtual BackendMiddlewareIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(BackendMiddlewareIf* /* handler */) = 0;
};

class BackendMiddlewareIfSingletonFactory : virtual public BackendMiddlewareIfFactory {
 public:
  BackendMiddlewareIfSingletonFactory(const boost::shared_ptr<BackendMiddlewareIf>& iface) : iface_(iface) {}
  virtual ~BackendMiddlewareIfSingletonFactory() {}

  virtual BackendMiddlewareIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(BackendMiddlewareIf* /* handler */) {}

 protected:
  boost::shared_ptr<BackendMiddlewareIf> iface_;
};

class BackendMiddlewareNull : virtual public BackendMiddlewareIf {
 public:
  virtual ~BackendMiddlewareNull() {}
  int64_t itemdbSize() {
    int64_t _return = 0;
    return _return;
  }
  int64_t tagdbSize() {
    int64_t _return = 0;
    return _return;
  }
  int64_t itemtagdbSize() {
    int64_t _return = 0;
    return _return;
  }
  int64_t itemtagSize(const std::string& /* tagID */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t userdbSize() {
    int64_t _return = 0;
    return _return;
  }
  int64_t itemsLikeSize(const std::string& /* userID */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t itemsDislikeSize(const std::string& /* userID */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t favouriteItemsSize(const std::string& /* userID */) {
    int64_t _return = 0;
    return _return;
  }
  void getAllTag(std::vector<Tag> & /* _return */) {
    return;
  }
  bool insertTag(const std::string& /* tagName */) {
    bool _return = false;
    return _return;
  }
  bool deleteTag(const std::string& /* tagID */) {
    bool _return = false;
    return _return;
  }
  bool deleteAllTag(const std::vector<std::string> & /* tagIDs */) {
    bool _return = false;
    return _return;
  }
  bool editTag(const std::string& /* tagID */, const std::string& /* tagName */) {
    bool _return = false;
    return _return;
  }
  void getTag(Tag& /* _return */, const std::string& /* tagID */) {
    return;
  }
  void setViewCountTag(const std::string& /* tagID */) {
    return;
  }
  void getTopTags(std::vector<Tag> & /* _return */, const int64_t /* number */) {
    return;
  }
  void getTagKeyword(std::vector<Tag> & /* _return */, const std::string& /* keyWord */) {
    return;
  }
  void getAllItems(std::vector<Item> & /* _return */, const int64_t /* number */) {
    return;
  }
  void getItemFromItemID(Item& /* _return */, const std::string& /* itemID */) {
    return;
  }
  void getItemsFromListItemID(std::vector<Item> & /* _return */, const std::vector<std::string> & /* itemIDs */) {
    return;
  }
  void getAllItemshaveTag(std::vector<Item> & /* _return */, const std::string& /* tagID */, const int32_t /* numberItems */) {
    return;
  }
  void pagingItemsTag(std::vector<Item> & /* _return */, const std::string& /* tagID */, const int32_t /* pageNumber */, const int32_t /* numberItems */) {
    return;
  }
  void getAllItemsIDhaveTag(std::vector<std::string> & /* _return */, const std::string& /* tagID */, const int32_t /* numberItemsID */) {
    return;
  }
  void getRandomItem(Item& /* _return */) {
    return;
  }
  void getRandomItemhaveTag(Item& /* _return */, const std::string& /* tagID */) {
    return;
  }
  void increaseViewCountItem(const std::string& /* itemID */) {
    return;
  }
  void increaseLikeCountItem(const std::string& /* itemID */) {
    return;
  }
  void increaseDislikeCountItem(const std::string& /* itemID */) {
    return;
  }
  void insertItem(std::string& /* _return */, const std::string& /* content */, const std::vector<std::string> & /* tagIDs */) {
    return;
  }
  bool deleteItem(const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  bool deleteAllItem(const std::vector<std::string> & /* itemIDs */) {
    bool _return = false;
    return _return;
  }
  bool editItem(const std::string& /* itemID */, const std::string& /* newItemValue */, const std::vector<std::string> & /* newTagIDs */) {
    bool _return = false;
    return _return;
  }
  void getItemsPage(std::vector<Item> & /* _return */, const int64_t /* pageNumber */, const int64_t /* itemNumber */, const std::string& /* tagID */) {
    return;
  }
  void getItemKeyword(std::vector<Item> & /* _return */, const std::string& /* keyWord */) {
    return;
  }
  void getItemsPageKeyword(std::vector<Item> & /* _return */, const std::string& /* keyWord */, const int64_t /* pageNumber */, const int64_t /* itemNumber */) {
    return;
  }
  void getItemKeywordTag(std::vector<Item> & /* _return */, const std::string& /* keyWord */, const std::string& /* tagID */) {
    return;
  }
  void getTopItems(std::vector<Item> & /* _return */, const int64_t /* number */) {
    return;
  }
  void getTopItemsofTag(std::vector<Item> & /* _return */, const int64_t /* number */, const std::string& /* tagID */) {
    return;
  }
  void getFavouriteItems(std::vector<Item> & /* _return */, const std::string& /* userID */, const int64_t /* number */) {
    return;
  }
  void getFavouriteItemsofTag(std::vector<Item> & /* _return */, const std::string& /* userID */, const int64_t /* number */, const std::string& /* tagID */) {
    return;
  }
  bool insertFavouriteItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  bool deleteFavouriteItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  void getAllItemsIDLike(std::vector<std::string> & /* _return */, const std::string& /* userID */) {
    return;
  }
  void getAllItemsLike(std::vector<Item> & /* _return */, const std::string& /* userID */, const int32_t /* number */) {
    return;
  }
  bool insertLikedItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  bool deleteLikedItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  void getAllItemsIDDislike(std::vector<std::string> & /* _return */, const std::string& /* userID */) {
    return;
  }
  void getAllItemsDislike(std::vector<Item> & /* _return */, const std::string& /* userID */, const int32_t /* number */) {
    return;
  }
  bool insertDislikedItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  bool deleteDislikedItem(const std::string& /* userID */, const std::string& /* itemID */) {
    bool _return = false;
    return _return;
  }
  bool userExisted(const std::string& /* userID */) {
    bool _return = false;
    return _return;
  }
  bool blockUser(const std::string& /* userID */) {
    bool _return = false;
    return _return;
  }
  bool unblockUser(const std::string& /* userID */) {
    bool _return = false;
    return _return;
  }
  bool addUser(const std::string& /* userID */, const std::string& /* userToken */, const int32_t /* userRole */) {
    bool _return = false;
    return _return;
  }
  bool deleteUser(const std::string& /* userID */) {
    bool _return = false;
    return _return;
  }
  bool editUser(const std::string& /* userID */, const std::string& /* userToken */, const int32_t /* userRole */) {
    bool _return = false;
    return _return;
  }
  bool deleteAllUser() {
    bool _return = false;
    return _return;
  }
  void getUser(User& /* _return */, const std::string& /* userID */) {
    return;
  }
  void getAllUser(std::vector<std::string> & /* _return */) {
    return;
  }
};


class BackendMiddleware_itemdbSize_args {
 public:

  BackendMiddleware_itemdbSize_args() {
  }

  virtual ~BackendMiddleware_itemdbSize_args() throw() {}


  bool operator == (const BackendMiddleware_itemdbSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_itemdbSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemdbSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_itemdbSize_pargs {
 public:


  virtual ~BackendMiddleware_itemdbSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemdbSize_result__isset {
  _BackendMiddleware_itemdbSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemdbSize_result__isset;

class BackendMiddleware_itemdbSize_result {
 public:

  BackendMiddleware_itemdbSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_itemdbSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_itemdbSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_itemdbSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemdbSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemdbSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemdbSize_presult__isset {
  _BackendMiddleware_itemdbSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemdbSize_presult__isset;

class BackendMiddleware_itemdbSize_presult {
 public:


  virtual ~BackendMiddleware_itemdbSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_itemdbSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_tagdbSize_args {
 public:

  BackendMiddleware_tagdbSize_args() {
  }

  virtual ~BackendMiddleware_tagdbSize_args() throw() {}


  bool operator == (const BackendMiddleware_tagdbSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_tagdbSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_tagdbSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_tagdbSize_pargs {
 public:


  virtual ~BackendMiddleware_tagdbSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_tagdbSize_result__isset {
  _BackendMiddleware_tagdbSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_tagdbSize_result__isset;

class BackendMiddleware_tagdbSize_result {
 public:

  BackendMiddleware_tagdbSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_tagdbSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_tagdbSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_tagdbSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_tagdbSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_tagdbSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_tagdbSize_presult__isset {
  _BackendMiddleware_tagdbSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_tagdbSize_presult__isset;

class BackendMiddleware_tagdbSize_presult {
 public:


  virtual ~BackendMiddleware_tagdbSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_tagdbSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_itemtagdbSize_args {
 public:

  BackendMiddleware_itemtagdbSize_args() {
  }

  virtual ~BackendMiddleware_itemtagdbSize_args() throw() {}


  bool operator == (const BackendMiddleware_itemtagdbSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_itemtagdbSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemtagdbSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_itemtagdbSize_pargs {
 public:


  virtual ~BackendMiddleware_itemtagdbSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemtagdbSize_result__isset {
  _BackendMiddleware_itemtagdbSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemtagdbSize_result__isset;

class BackendMiddleware_itemtagdbSize_result {
 public:

  BackendMiddleware_itemtagdbSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_itemtagdbSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_itemtagdbSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_itemtagdbSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemtagdbSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemtagdbSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemtagdbSize_presult__isset {
  _BackendMiddleware_itemtagdbSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemtagdbSize_presult__isset;

class BackendMiddleware_itemtagdbSize_presult {
 public:


  virtual ~BackendMiddleware_itemtagdbSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_itemtagdbSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_itemtagSize_args__isset {
  _BackendMiddleware_itemtagSize_args__isset() : tagID(false) {}
  bool tagID;
} _BackendMiddleware_itemtagSize_args__isset;

class BackendMiddleware_itemtagSize_args {
 public:

  BackendMiddleware_itemtagSize_args() : tagID() {
  }

  virtual ~BackendMiddleware_itemtagSize_args() throw() {}

  std::string tagID;

  _BackendMiddleware_itemtagSize_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_itemtagSize_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemtagSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemtagSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_itemtagSize_pargs {
 public:


  virtual ~BackendMiddleware_itemtagSize_pargs() throw() {}

  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemtagSize_result__isset {
  _BackendMiddleware_itemtagSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemtagSize_result__isset;

class BackendMiddleware_itemtagSize_result {
 public:

  BackendMiddleware_itemtagSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_itemtagSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_itemtagSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_itemtagSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemtagSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemtagSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemtagSize_presult__isset {
  _BackendMiddleware_itemtagSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemtagSize_presult__isset;

class BackendMiddleware_itemtagSize_presult {
 public:


  virtual ~BackendMiddleware_itemtagSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_itemtagSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_userdbSize_args {
 public:

  BackendMiddleware_userdbSize_args() {
  }

  virtual ~BackendMiddleware_userdbSize_args() throw() {}


  bool operator == (const BackendMiddleware_userdbSize_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_userdbSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_userdbSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_userdbSize_pargs {
 public:


  virtual ~BackendMiddleware_userdbSize_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_userdbSize_result__isset {
  _BackendMiddleware_userdbSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_userdbSize_result__isset;

class BackendMiddleware_userdbSize_result {
 public:

  BackendMiddleware_userdbSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_userdbSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_userdbSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_userdbSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_userdbSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_userdbSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_userdbSize_presult__isset {
  _BackendMiddleware_userdbSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_userdbSize_presult__isset;

class BackendMiddleware_userdbSize_presult {
 public:


  virtual ~BackendMiddleware_userdbSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_userdbSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_itemsLikeSize_args__isset {
  _BackendMiddleware_itemsLikeSize_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_itemsLikeSize_args__isset;

class BackendMiddleware_itemsLikeSize_args {
 public:

  BackendMiddleware_itemsLikeSize_args() : userID() {
  }

  virtual ~BackendMiddleware_itemsLikeSize_args() throw() {}

  std::string userID;

  _BackendMiddleware_itemsLikeSize_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_itemsLikeSize_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemsLikeSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemsLikeSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_itemsLikeSize_pargs {
 public:


  virtual ~BackendMiddleware_itemsLikeSize_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemsLikeSize_result__isset {
  _BackendMiddleware_itemsLikeSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemsLikeSize_result__isset;

class BackendMiddleware_itemsLikeSize_result {
 public:

  BackendMiddleware_itemsLikeSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_itemsLikeSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_itemsLikeSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_itemsLikeSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemsLikeSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemsLikeSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemsLikeSize_presult__isset {
  _BackendMiddleware_itemsLikeSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemsLikeSize_presult__isset;

class BackendMiddleware_itemsLikeSize_presult {
 public:


  virtual ~BackendMiddleware_itemsLikeSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_itemsLikeSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_itemsDislikeSize_args__isset {
  _BackendMiddleware_itemsDislikeSize_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_itemsDislikeSize_args__isset;

class BackendMiddleware_itemsDislikeSize_args {
 public:

  BackendMiddleware_itemsDislikeSize_args() : userID() {
  }

  virtual ~BackendMiddleware_itemsDislikeSize_args() throw() {}

  std::string userID;

  _BackendMiddleware_itemsDislikeSize_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_itemsDislikeSize_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemsDislikeSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemsDislikeSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_itemsDislikeSize_pargs {
 public:


  virtual ~BackendMiddleware_itemsDislikeSize_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemsDislikeSize_result__isset {
  _BackendMiddleware_itemsDislikeSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemsDislikeSize_result__isset;

class BackendMiddleware_itemsDislikeSize_result {
 public:

  BackendMiddleware_itemsDislikeSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_itemsDislikeSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_itemsDislikeSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_itemsDislikeSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_itemsDislikeSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_itemsDislikeSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_itemsDislikeSize_presult__isset {
  _BackendMiddleware_itemsDislikeSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_itemsDislikeSize_presult__isset;

class BackendMiddleware_itemsDislikeSize_presult {
 public:


  virtual ~BackendMiddleware_itemsDislikeSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_itemsDislikeSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_favouriteItemsSize_args__isset {
  _BackendMiddleware_favouriteItemsSize_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_favouriteItemsSize_args__isset;

class BackendMiddleware_favouriteItemsSize_args {
 public:

  BackendMiddleware_favouriteItemsSize_args() : userID() {
  }

  virtual ~BackendMiddleware_favouriteItemsSize_args() throw() {}

  std::string userID;

  _BackendMiddleware_favouriteItemsSize_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_favouriteItemsSize_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_favouriteItemsSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_favouriteItemsSize_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_favouriteItemsSize_pargs {
 public:


  virtual ~BackendMiddleware_favouriteItemsSize_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_favouriteItemsSize_result__isset {
  _BackendMiddleware_favouriteItemsSize_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_favouriteItemsSize_result__isset;

class BackendMiddleware_favouriteItemsSize_result {
 public:

  BackendMiddleware_favouriteItemsSize_result() : success(0) {
  }

  virtual ~BackendMiddleware_favouriteItemsSize_result() throw() {}

  int64_t success;

  _BackendMiddleware_favouriteItemsSize_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_favouriteItemsSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_favouriteItemsSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_favouriteItemsSize_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_favouriteItemsSize_presult__isset {
  _BackendMiddleware_favouriteItemsSize_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_favouriteItemsSize_presult__isset;

class BackendMiddleware_favouriteItemsSize_presult {
 public:


  virtual ~BackendMiddleware_favouriteItemsSize_presult() throw() {}

  int64_t* success;

  _BackendMiddleware_favouriteItemsSize_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_getAllTag_args {
 public:

  BackendMiddleware_getAllTag_args() {
  }

  virtual ~BackendMiddleware_getAllTag_args() throw() {}


  bool operator == (const BackendMiddleware_getAllTag_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_getAllTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllTag_pargs {
 public:


  virtual ~BackendMiddleware_getAllTag_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllTag_result__isset {
  _BackendMiddleware_getAllTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllTag_result__isset;

class BackendMiddleware_getAllTag_result {
 public:

  BackendMiddleware_getAllTag_result() {
  }

  virtual ~BackendMiddleware_getAllTag_result() throw() {}

  std::vector<Tag>  success;

  _BackendMiddleware_getAllTag_result__isset __isset;

  void __set_success(const std::vector<Tag> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllTag_presult__isset {
  _BackendMiddleware_getAllTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllTag_presult__isset;

class BackendMiddleware_getAllTag_presult {
 public:


  virtual ~BackendMiddleware_getAllTag_presult() throw() {}

  std::vector<Tag> * success;

  _BackendMiddleware_getAllTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_insertTag_args__isset {
  _BackendMiddleware_insertTag_args__isset() : tagName(false) {}
  bool tagName;
} _BackendMiddleware_insertTag_args__isset;

class BackendMiddleware_insertTag_args {
 public:

  BackendMiddleware_insertTag_args() : tagName() {
  }

  virtual ~BackendMiddleware_insertTag_args() throw() {}

  std::string tagName;

  _BackendMiddleware_insertTag_args__isset __isset;

  void __set_tagName(const std::string& val) {
    tagName = val;
  }

  bool operator == (const BackendMiddleware_insertTag_args & rhs) const
  {
    if (!(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_insertTag_pargs {
 public:


  virtual ~BackendMiddleware_insertTag_pargs() throw() {}

  const std::string* tagName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertTag_result__isset {
  _BackendMiddleware_insertTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertTag_result__isset;

class BackendMiddleware_insertTag_result {
 public:

  BackendMiddleware_insertTag_result() : success(0) {
  }

  virtual ~BackendMiddleware_insertTag_result() throw() {}

  bool success;

  _BackendMiddleware_insertTag_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_insertTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertTag_presult__isset {
  _BackendMiddleware_insertTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertTag_presult__isset;

class BackendMiddleware_insertTag_presult {
 public:


  virtual ~BackendMiddleware_insertTag_presult() throw() {}

  bool* success;

  _BackendMiddleware_insertTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteTag_args__isset {
  _BackendMiddleware_deleteTag_args__isset() : tagID(false) {}
  bool tagID;
} _BackendMiddleware_deleteTag_args__isset;

class BackendMiddleware_deleteTag_args {
 public:

  BackendMiddleware_deleteTag_args() : tagID() {
  }

  virtual ~BackendMiddleware_deleteTag_args() throw() {}

  std::string tagID;

  _BackendMiddleware_deleteTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_deleteTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteTag_pargs {
 public:


  virtual ~BackendMiddleware_deleteTag_pargs() throw() {}

  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteTag_result__isset {
  _BackendMiddleware_deleteTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteTag_result__isset;

class BackendMiddleware_deleteTag_result {
 public:

  BackendMiddleware_deleteTag_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteTag_result() throw() {}

  bool success;

  _BackendMiddleware_deleteTag_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteTag_presult__isset {
  _BackendMiddleware_deleteTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteTag_presult__isset;

class BackendMiddleware_deleteTag_presult {
 public:


  virtual ~BackendMiddleware_deleteTag_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteAllTag_args__isset {
  _BackendMiddleware_deleteAllTag_args__isset() : tagIDs(false) {}
  bool tagIDs;
} _BackendMiddleware_deleteAllTag_args__isset;

class BackendMiddleware_deleteAllTag_args {
 public:

  BackendMiddleware_deleteAllTag_args() {
  }

  virtual ~BackendMiddleware_deleteAllTag_args() throw() {}

  std::vector<std::string>  tagIDs;

  _BackendMiddleware_deleteAllTag_args__isset __isset;

  void __set_tagIDs(const std::vector<std::string> & val) {
    tagIDs = val;
  }

  bool operator == (const BackendMiddleware_deleteAllTag_args & rhs) const
  {
    if (!(tagIDs == rhs.tagIDs))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteAllTag_pargs {
 public:


  virtual ~BackendMiddleware_deleteAllTag_pargs() throw() {}

  const std::vector<std::string> * tagIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllTag_result__isset {
  _BackendMiddleware_deleteAllTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllTag_result__isset;

class BackendMiddleware_deleteAllTag_result {
 public:

  BackendMiddleware_deleteAllTag_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteAllTag_result() throw() {}

  bool success;

  _BackendMiddleware_deleteAllTag_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteAllTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllTag_presult__isset {
  _BackendMiddleware_deleteAllTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllTag_presult__isset;

class BackendMiddleware_deleteAllTag_presult {
 public:


  virtual ~BackendMiddleware_deleteAllTag_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteAllTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_editTag_args__isset {
  _BackendMiddleware_editTag_args__isset() : tagID(false), tagName(false) {}
  bool tagID;
  bool tagName;
} _BackendMiddleware_editTag_args__isset;

class BackendMiddleware_editTag_args {
 public:

  BackendMiddleware_editTag_args() : tagID(), tagName() {
  }

  virtual ~BackendMiddleware_editTag_args() throw() {}

  std::string tagID;
  std::string tagName;

  _BackendMiddleware_editTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  void __set_tagName(const std::string& val) {
    tagName = val;
  }

  bool operator == (const BackendMiddleware_editTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    if (!(tagName == rhs.tagName))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_editTag_pargs {
 public:


  virtual ~BackendMiddleware_editTag_pargs() throw() {}

  const std::string* tagID;
  const std::string* tagName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editTag_result__isset {
  _BackendMiddleware_editTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editTag_result__isset;

class BackendMiddleware_editTag_result {
 public:

  BackendMiddleware_editTag_result() : success(0) {
  }

  virtual ~BackendMiddleware_editTag_result() throw() {}

  bool success;

  _BackendMiddleware_editTag_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_editTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editTag_presult__isset {
  _BackendMiddleware_editTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editTag_presult__isset;

class BackendMiddleware_editTag_presult {
 public:


  virtual ~BackendMiddleware_editTag_presult() throw() {}

  bool* success;

  _BackendMiddleware_editTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getTag_args__isset {
  _BackendMiddleware_getTag_args__isset() : tagID(false) {}
  bool tagID;
} _BackendMiddleware_getTag_args__isset;

class BackendMiddleware_getTag_args {
 public:

  BackendMiddleware_getTag_args() : tagID() {
  }

  virtual ~BackendMiddleware_getTag_args() throw() {}

  std::string tagID;

  _BackendMiddleware_getTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getTag_pargs {
 public:


  virtual ~BackendMiddleware_getTag_pargs() throw() {}

  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTag_result__isset {
  _BackendMiddleware_getTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTag_result__isset;

class BackendMiddleware_getTag_result {
 public:

  BackendMiddleware_getTag_result() {
  }

  virtual ~BackendMiddleware_getTag_result() throw() {}

  Tag success;

  _BackendMiddleware_getTag_result__isset __isset;

  void __set_success(const Tag& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTag_presult__isset {
  _BackendMiddleware_getTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTag_presult__isset;

class BackendMiddleware_getTag_presult {
 public:


  virtual ~BackendMiddleware_getTag_presult() throw() {}

  Tag* success;

  _BackendMiddleware_getTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_setViewCountTag_args__isset {
  _BackendMiddleware_setViewCountTag_args__isset() : tagID(false) {}
  bool tagID;
} _BackendMiddleware_setViewCountTag_args__isset;

class BackendMiddleware_setViewCountTag_args {
 public:

  BackendMiddleware_setViewCountTag_args() : tagID() {
  }

  virtual ~BackendMiddleware_setViewCountTag_args() throw() {}

  std::string tagID;

  _BackendMiddleware_setViewCountTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_setViewCountTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_setViewCountTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_setViewCountTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_setViewCountTag_pargs {
 public:


  virtual ~BackendMiddleware_setViewCountTag_pargs() throw() {}

  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_setViewCountTag_result {
 public:

  BackendMiddleware_setViewCountTag_result() {
  }

  virtual ~BackendMiddleware_setViewCountTag_result() throw() {}


  bool operator == (const BackendMiddleware_setViewCountTag_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_setViewCountTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_setViewCountTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_setViewCountTag_presult {
 public:


  virtual ~BackendMiddleware_setViewCountTag_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getTopTags_args__isset {
  _BackendMiddleware_getTopTags_args__isset() : number(false) {}
  bool number;
} _BackendMiddleware_getTopTags_args__isset;

class BackendMiddleware_getTopTags_args {
 public:

  BackendMiddleware_getTopTags_args() : number(0) {
  }

  virtual ~BackendMiddleware_getTopTags_args() throw() {}

  int64_t number;

  _BackendMiddleware_getTopTags_args__isset __isset;

  void __set_number(const int64_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getTopTags_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopTags_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopTags_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getTopTags_pargs {
 public:


  virtual ~BackendMiddleware_getTopTags_pargs() throw() {}

  const int64_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopTags_result__isset {
  _BackendMiddleware_getTopTags_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopTags_result__isset;

class BackendMiddleware_getTopTags_result {
 public:

  BackendMiddleware_getTopTags_result() {
  }

  virtual ~BackendMiddleware_getTopTags_result() throw() {}

  std::vector<Tag>  success;

  _BackendMiddleware_getTopTags_result__isset __isset;

  void __set_success(const std::vector<Tag> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getTopTags_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopTags_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopTags_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopTags_presult__isset {
  _BackendMiddleware_getTopTags_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopTags_presult__isset;

class BackendMiddleware_getTopTags_presult {
 public:


  virtual ~BackendMiddleware_getTopTags_presult() throw() {}

  std::vector<Tag> * success;

  _BackendMiddleware_getTopTags_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getTagKeyword_args__isset {
  _BackendMiddleware_getTagKeyword_args__isset() : keyWord(false) {}
  bool keyWord;
} _BackendMiddleware_getTagKeyword_args__isset;

class BackendMiddleware_getTagKeyword_args {
 public:

  BackendMiddleware_getTagKeyword_args() : keyWord() {
  }

  virtual ~BackendMiddleware_getTagKeyword_args() throw() {}

  std::string keyWord;

  _BackendMiddleware_getTagKeyword_args__isset __isset;

  void __set_keyWord(const std::string& val) {
    keyWord = val;
  }

  bool operator == (const BackendMiddleware_getTagKeyword_args & rhs) const
  {
    if (!(keyWord == rhs.keyWord))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTagKeyword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTagKeyword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getTagKeyword_pargs {
 public:


  virtual ~BackendMiddleware_getTagKeyword_pargs() throw() {}

  const std::string* keyWord;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTagKeyword_result__isset {
  _BackendMiddleware_getTagKeyword_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTagKeyword_result__isset;

class BackendMiddleware_getTagKeyword_result {
 public:

  BackendMiddleware_getTagKeyword_result() {
  }

  virtual ~BackendMiddleware_getTagKeyword_result() throw() {}

  std::vector<Tag>  success;

  _BackendMiddleware_getTagKeyword_result__isset __isset;

  void __set_success(const std::vector<Tag> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getTagKeyword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTagKeyword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTagKeyword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTagKeyword_presult__isset {
  _BackendMiddleware_getTagKeyword_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTagKeyword_presult__isset;

class BackendMiddleware_getTagKeyword_presult {
 public:


  virtual ~BackendMiddleware_getTagKeyword_presult() throw() {}

  std::vector<Tag> * success;

  _BackendMiddleware_getTagKeyword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItems_args__isset {
  _BackendMiddleware_getAllItems_args__isset() : number(false) {}
  bool number;
} _BackendMiddleware_getAllItems_args__isset;

class BackendMiddleware_getAllItems_args {
 public:

  BackendMiddleware_getAllItems_args() : number(0) {
  }

  virtual ~BackendMiddleware_getAllItems_args() throw() {}

  int64_t number;

  _BackendMiddleware_getAllItems_args__isset __isset;

  void __set_number(const int64_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getAllItems_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItems_pargs {
 public:


  virtual ~BackendMiddleware_getAllItems_pargs() throw() {}

  const int64_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItems_result__isset {
  _BackendMiddleware_getAllItems_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItems_result__isset;

class BackendMiddleware_getAllItems_result {
 public:

  BackendMiddleware_getAllItems_result() {
  }

  virtual ~BackendMiddleware_getAllItems_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getAllItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItems_presult__isset {
  _BackendMiddleware_getAllItems_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItems_presult__isset;

class BackendMiddleware_getAllItems_presult {
 public:


  virtual ~BackendMiddleware_getAllItems_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getAllItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemFromItemID_args__isset {
  _BackendMiddleware_getItemFromItemID_args__isset() : itemID(false) {}
  bool itemID;
} _BackendMiddleware_getItemFromItemID_args__isset;

class BackendMiddleware_getItemFromItemID_args {
 public:

  BackendMiddleware_getItemFromItemID_args() : itemID() {
  }

  virtual ~BackendMiddleware_getItemFromItemID_args() throw() {}

  std::string itemID;

  _BackendMiddleware_getItemFromItemID_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_getItemFromItemID_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemFromItemID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemFromItemID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemFromItemID_pargs {
 public:


  virtual ~BackendMiddleware_getItemFromItemID_pargs() throw() {}

  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemFromItemID_result__isset {
  _BackendMiddleware_getItemFromItemID_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemFromItemID_result__isset;

class BackendMiddleware_getItemFromItemID_result {
 public:

  BackendMiddleware_getItemFromItemID_result() {
  }

  virtual ~BackendMiddleware_getItemFromItemID_result() throw() {}

  Item success;

  _BackendMiddleware_getItemFromItemID_result__isset __isset;

  void __set_success(const Item& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemFromItemID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemFromItemID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemFromItemID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemFromItemID_presult__isset {
  _BackendMiddleware_getItemFromItemID_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemFromItemID_presult__isset;

class BackendMiddleware_getItemFromItemID_presult {
 public:


  virtual ~BackendMiddleware_getItemFromItemID_presult() throw() {}

  Item* success;

  _BackendMiddleware_getItemFromItemID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemsFromListItemID_args__isset {
  _BackendMiddleware_getItemsFromListItemID_args__isset() : itemIDs(false) {}
  bool itemIDs;
} _BackendMiddleware_getItemsFromListItemID_args__isset;

class BackendMiddleware_getItemsFromListItemID_args {
 public:

  BackendMiddleware_getItemsFromListItemID_args() {
  }

  virtual ~BackendMiddleware_getItemsFromListItemID_args() throw() {}

  std::vector<std::string>  itemIDs;

  _BackendMiddleware_getItemsFromListItemID_args__isset __isset;

  void __set_itemIDs(const std::vector<std::string> & val) {
    itemIDs = val;
  }

  bool operator == (const BackendMiddleware_getItemsFromListItemID_args & rhs) const
  {
    if (!(itemIDs == rhs.itemIDs))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsFromListItemID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsFromListItemID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemsFromListItemID_pargs {
 public:


  virtual ~BackendMiddleware_getItemsFromListItemID_pargs() throw() {}

  const std::vector<std::string> * itemIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsFromListItemID_result__isset {
  _BackendMiddleware_getItemsFromListItemID_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsFromListItemID_result__isset;

class BackendMiddleware_getItemsFromListItemID_result {
 public:

  BackendMiddleware_getItemsFromListItemID_result() {
  }

  virtual ~BackendMiddleware_getItemsFromListItemID_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getItemsFromListItemID_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemsFromListItemID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsFromListItemID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsFromListItemID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsFromListItemID_presult__isset {
  _BackendMiddleware_getItemsFromListItemID_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsFromListItemID_presult__isset;

class BackendMiddleware_getItemsFromListItemID_presult {
 public:


  virtual ~BackendMiddleware_getItemsFromListItemID_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getItemsFromListItemID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemshaveTag_args__isset {
  _BackendMiddleware_getAllItemshaveTag_args__isset() : tagID(false), numberItems(false) {}
  bool tagID;
  bool numberItems;
} _BackendMiddleware_getAllItemshaveTag_args__isset;

class BackendMiddleware_getAllItemshaveTag_args {
 public:

  BackendMiddleware_getAllItemshaveTag_args() : tagID(), numberItems(0) {
  }

  virtual ~BackendMiddleware_getAllItemshaveTag_args() throw() {}

  std::string tagID;
  int32_t numberItems;

  _BackendMiddleware_getAllItemshaveTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  void __set_numberItems(const int32_t val) {
    numberItems = val;
  }

  bool operator == (const BackendMiddleware_getAllItemshaveTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    if (!(numberItems == rhs.numberItems))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemshaveTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemshaveTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemshaveTag_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemshaveTag_pargs() throw() {}

  const std::string* tagID;
  const int32_t* numberItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemshaveTag_result__isset {
  _BackendMiddleware_getAllItemshaveTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemshaveTag_result__isset;

class BackendMiddleware_getAllItemshaveTag_result {
 public:

  BackendMiddleware_getAllItemshaveTag_result() {
  }

  virtual ~BackendMiddleware_getAllItemshaveTag_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getAllItemshaveTag_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemshaveTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemshaveTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemshaveTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemshaveTag_presult__isset {
  _BackendMiddleware_getAllItemshaveTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemshaveTag_presult__isset;

class BackendMiddleware_getAllItemshaveTag_presult {
 public:


  virtual ~BackendMiddleware_getAllItemshaveTag_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getAllItemshaveTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_pagingItemsTag_args__isset {
  _BackendMiddleware_pagingItemsTag_args__isset() : tagID(false), pageNumber(false), numberItems(false) {}
  bool tagID;
  bool pageNumber;
  bool numberItems;
} _BackendMiddleware_pagingItemsTag_args__isset;

class BackendMiddleware_pagingItemsTag_args {
 public:

  BackendMiddleware_pagingItemsTag_args() : tagID(), pageNumber(0), numberItems(0) {
  }

  virtual ~BackendMiddleware_pagingItemsTag_args() throw() {}

  std::string tagID;
  int32_t pageNumber;
  int32_t numberItems;

  _BackendMiddleware_pagingItemsTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  void __set_pageNumber(const int32_t val) {
    pageNumber = val;
  }

  void __set_numberItems(const int32_t val) {
    numberItems = val;
  }

  bool operator == (const BackendMiddleware_pagingItemsTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    if (!(pageNumber == rhs.pageNumber))
      return false;
    if (!(numberItems == rhs.numberItems))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_pagingItemsTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_pagingItemsTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_pagingItemsTag_pargs {
 public:


  virtual ~BackendMiddleware_pagingItemsTag_pargs() throw() {}

  const std::string* tagID;
  const int32_t* pageNumber;
  const int32_t* numberItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_pagingItemsTag_result__isset {
  _BackendMiddleware_pagingItemsTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_pagingItemsTag_result__isset;

class BackendMiddleware_pagingItemsTag_result {
 public:

  BackendMiddleware_pagingItemsTag_result() {
  }

  virtual ~BackendMiddleware_pagingItemsTag_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_pagingItemsTag_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_pagingItemsTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_pagingItemsTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_pagingItemsTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_pagingItemsTag_presult__isset {
  _BackendMiddleware_pagingItemsTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_pagingItemsTag_presult__isset;

class BackendMiddleware_pagingItemsTag_presult {
 public:


  virtual ~BackendMiddleware_pagingItemsTag_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_pagingItemsTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemsIDhaveTag_args__isset {
  _BackendMiddleware_getAllItemsIDhaveTag_args__isset() : tagID(false), numberItemsID(false) {}
  bool tagID;
  bool numberItemsID;
} _BackendMiddleware_getAllItemsIDhaveTag_args__isset;

class BackendMiddleware_getAllItemsIDhaveTag_args {
 public:

  BackendMiddleware_getAllItemsIDhaveTag_args() : tagID(), numberItemsID(0) {
  }

  virtual ~BackendMiddleware_getAllItemsIDhaveTag_args() throw() {}

  std::string tagID;
  int32_t numberItemsID;

  _BackendMiddleware_getAllItemsIDhaveTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  void __set_numberItemsID(const int32_t val) {
    numberItemsID = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDhaveTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    if (!(numberItemsID == rhs.numberItemsID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDhaveTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDhaveTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemsIDhaveTag_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemsIDhaveTag_pargs() throw() {}

  const std::string* tagID;
  const int32_t* numberItemsID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDhaveTag_result__isset {
  _BackendMiddleware_getAllItemsIDhaveTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDhaveTag_result__isset;

class BackendMiddleware_getAllItemsIDhaveTag_result {
 public:

  BackendMiddleware_getAllItemsIDhaveTag_result() {
  }

  virtual ~BackendMiddleware_getAllItemsIDhaveTag_result() throw() {}

  std::vector<std::string>  success;

  _BackendMiddleware_getAllItemsIDhaveTag_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDhaveTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDhaveTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDhaveTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDhaveTag_presult__isset {
  _BackendMiddleware_getAllItemsIDhaveTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDhaveTag_presult__isset;

class BackendMiddleware_getAllItemsIDhaveTag_presult {
 public:


  virtual ~BackendMiddleware_getAllItemsIDhaveTag_presult() throw() {}

  std::vector<std::string> * success;

  _BackendMiddleware_getAllItemsIDhaveTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_getRandomItem_args {
 public:

  BackendMiddleware_getRandomItem_args() {
  }

  virtual ~BackendMiddleware_getRandomItem_args() throw() {}


  bool operator == (const BackendMiddleware_getRandomItem_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_getRandomItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getRandomItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getRandomItem_pargs {
 public:


  virtual ~BackendMiddleware_getRandomItem_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getRandomItem_result__isset {
  _BackendMiddleware_getRandomItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getRandomItem_result__isset;

class BackendMiddleware_getRandomItem_result {
 public:

  BackendMiddleware_getRandomItem_result() {
  }

  virtual ~BackendMiddleware_getRandomItem_result() throw() {}

  Item success;

  _BackendMiddleware_getRandomItem_result__isset __isset;

  void __set_success(const Item& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getRandomItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getRandomItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getRandomItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getRandomItem_presult__isset {
  _BackendMiddleware_getRandomItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getRandomItem_presult__isset;

class BackendMiddleware_getRandomItem_presult {
 public:


  virtual ~BackendMiddleware_getRandomItem_presult() throw() {}

  Item* success;

  _BackendMiddleware_getRandomItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getRandomItemhaveTag_args__isset {
  _BackendMiddleware_getRandomItemhaveTag_args__isset() : tagID(false) {}
  bool tagID;
} _BackendMiddleware_getRandomItemhaveTag_args__isset;

class BackendMiddleware_getRandomItemhaveTag_args {
 public:

  BackendMiddleware_getRandomItemhaveTag_args() : tagID() {
  }

  virtual ~BackendMiddleware_getRandomItemhaveTag_args() throw() {}

  std::string tagID;

  _BackendMiddleware_getRandomItemhaveTag_args__isset __isset;

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getRandomItemhaveTag_args & rhs) const
  {
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getRandomItemhaveTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getRandomItemhaveTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getRandomItemhaveTag_pargs {
 public:


  virtual ~BackendMiddleware_getRandomItemhaveTag_pargs() throw() {}

  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getRandomItemhaveTag_result__isset {
  _BackendMiddleware_getRandomItemhaveTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getRandomItemhaveTag_result__isset;

class BackendMiddleware_getRandomItemhaveTag_result {
 public:

  BackendMiddleware_getRandomItemhaveTag_result() {
  }

  virtual ~BackendMiddleware_getRandomItemhaveTag_result() throw() {}

  Item success;

  _BackendMiddleware_getRandomItemhaveTag_result__isset __isset;

  void __set_success(const Item& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getRandomItemhaveTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getRandomItemhaveTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getRandomItemhaveTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getRandomItemhaveTag_presult__isset {
  _BackendMiddleware_getRandomItemhaveTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getRandomItemhaveTag_presult__isset;

class BackendMiddleware_getRandomItemhaveTag_presult {
 public:


  virtual ~BackendMiddleware_getRandomItemhaveTag_presult() throw() {}

  Item* success;

  _BackendMiddleware_getRandomItemhaveTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_increaseViewCountItem_args__isset {
  _BackendMiddleware_increaseViewCountItem_args__isset() : itemID(false) {}
  bool itemID;
} _BackendMiddleware_increaseViewCountItem_args__isset;

class BackendMiddleware_increaseViewCountItem_args {
 public:

  BackendMiddleware_increaseViewCountItem_args() : itemID() {
  }

  virtual ~BackendMiddleware_increaseViewCountItem_args() throw() {}

  std::string itemID;

  _BackendMiddleware_increaseViewCountItem_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_increaseViewCountItem_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_increaseViewCountItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseViewCountItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseViewCountItem_pargs {
 public:


  virtual ~BackendMiddleware_increaseViewCountItem_pargs() throw() {}

  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseViewCountItem_result {
 public:

  BackendMiddleware_increaseViewCountItem_result() {
  }

  virtual ~BackendMiddleware_increaseViewCountItem_result() throw() {}


  bool operator == (const BackendMiddleware_increaseViewCountItem_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_increaseViewCountItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseViewCountItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseViewCountItem_presult {
 public:


  virtual ~BackendMiddleware_increaseViewCountItem_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_increaseLikeCountItem_args__isset {
  _BackendMiddleware_increaseLikeCountItem_args__isset() : itemID(false) {}
  bool itemID;
} _BackendMiddleware_increaseLikeCountItem_args__isset;

class BackendMiddleware_increaseLikeCountItem_args {
 public:

  BackendMiddleware_increaseLikeCountItem_args() : itemID() {
  }

  virtual ~BackendMiddleware_increaseLikeCountItem_args() throw() {}

  std::string itemID;

  _BackendMiddleware_increaseLikeCountItem_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_increaseLikeCountItem_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_increaseLikeCountItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseLikeCountItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseLikeCountItem_pargs {
 public:


  virtual ~BackendMiddleware_increaseLikeCountItem_pargs() throw() {}

  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseLikeCountItem_result {
 public:

  BackendMiddleware_increaseLikeCountItem_result() {
  }

  virtual ~BackendMiddleware_increaseLikeCountItem_result() throw() {}


  bool operator == (const BackendMiddleware_increaseLikeCountItem_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_increaseLikeCountItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseLikeCountItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseLikeCountItem_presult {
 public:


  virtual ~BackendMiddleware_increaseLikeCountItem_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_increaseDislikeCountItem_args__isset {
  _BackendMiddleware_increaseDislikeCountItem_args__isset() : itemID(false) {}
  bool itemID;
} _BackendMiddleware_increaseDislikeCountItem_args__isset;

class BackendMiddleware_increaseDislikeCountItem_args {
 public:

  BackendMiddleware_increaseDislikeCountItem_args() : itemID() {
  }

  virtual ~BackendMiddleware_increaseDislikeCountItem_args() throw() {}

  std::string itemID;

  _BackendMiddleware_increaseDislikeCountItem_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_increaseDislikeCountItem_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_increaseDislikeCountItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseDislikeCountItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseDislikeCountItem_pargs {
 public:


  virtual ~BackendMiddleware_increaseDislikeCountItem_pargs() throw() {}

  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseDislikeCountItem_result {
 public:

  BackendMiddleware_increaseDislikeCountItem_result() {
  }

  virtual ~BackendMiddleware_increaseDislikeCountItem_result() throw() {}


  bool operator == (const BackendMiddleware_increaseDislikeCountItem_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_increaseDislikeCountItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_increaseDislikeCountItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_increaseDislikeCountItem_presult {
 public:


  virtual ~BackendMiddleware_increaseDislikeCountItem_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_insertItem_args__isset {
  _BackendMiddleware_insertItem_args__isset() : content(false), tagIDs(false) {}
  bool content;
  bool tagIDs;
} _BackendMiddleware_insertItem_args__isset;

class BackendMiddleware_insertItem_args {
 public:

  BackendMiddleware_insertItem_args() : content() {
  }

  virtual ~BackendMiddleware_insertItem_args() throw() {}

  std::string content;
  std::vector<std::string>  tagIDs;

  _BackendMiddleware_insertItem_args__isset __isset;

  void __set_content(const std::string& val) {
    content = val;
  }

  void __set_tagIDs(const std::vector<std::string> & val) {
    tagIDs = val;
  }

  bool operator == (const BackendMiddleware_insertItem_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    if (!(tagIDs == rhs.tagIDs))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_insertItem_pargs {
 public:


  virtual ~BackendMiddleware_insertItem_pargs() throw() {}

  const std::string* content;
  const std::vector<std::string> * tagIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertItem_result__isset {
  _BackendMiddleware_insertItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertItem_result__isset;

class BackendMiddleware_insertItem_result {
 public:

  BackendMiddleware_insertItem_result() : success() {
  }

  virtual ~BackendMiddleware_insertItem_result() throw() {}

  std::string success;

  _BackendMiddleware_insertItem_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_insertItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertItem_presult__isset {
  _BackendMiddleware_insertItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertItem_presult__isset;

class BackendMiddleware_insertItem_presult {
 public:


  virtual ~BackendMiddleware_insertItem_presult() throw() {}

  std::string* success;

  _BackendMiddleware_insertItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteItem_args__isset {
  _BackendMiddleware_deleteItem_args__isset() : itemID(false) {}
  bool itemID;
} _BackendMiddleware_deleteItem_args__isset;

class BackendMiddleware_deleteItem_args {
 public:

  BackendMiddleware_deleteItem_args() : itemID() {
  }

  virtual ~BackendMiddleware_deleteItem_args() throw() {}

  std::string itemID;

  _BackendMiddleware_deleteItem_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_deleteItem_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteItem_pargs {
 public:


  virtual ~BackendMiddleware_deleteItem_pargs() throw() {}

  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteItem_result__isset {
  _BackendMiddleware_deleteItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteItem_result__isset;

class BackendMiddleware_deleteItem_result {
 public:

  BackendMiddleware_deleteItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteItem_result() throw() {}

  bool success;

  _BackendMiddleware_deleteItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteItem_presult__isset {
  _BackendMiddleware_deleteItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteItem_presult__isset;

class BackendMiddleware_deleteItem_presult {
 public:


  virtual ~BackendMiddleware_deleteItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteAllItem_args__isset {
  _BackendMiddleware_deleteAllItem_args__isset() : itemIDs(false) {}
  bool itemIDs;
} _BackendMiddleware_deleteAllItem_args__isset;

class BackendMiddleware_deleteAllItem_args {
 public:

  BackendMiddleware_deleteAllItem_args() {
  }

  virtual ~BackendMiddleware_deleteAllItem_args() throw() {}

  std::vector<std::string>  itemIDs;

  _BackendMiddleware_deleteAllItem_args__isset __isset;

  void __set_itemIDs(const std::vector<std::string> & val) {
    itemIDs = val;
  }

  bool operator == (const BackendMiddleware_deleteAllItem_args & rhs) const
  {
    if (!(itemIDs == rhs.itemIDs))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteAllItem_pargs {
 public:


  virtual ~BackendMiddleware_deleteAllItem_pargs() throw() {}

  const std::vector<std::string> * itemIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllItem_result__isset {
  _BackendMiddleware_deleteAllItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllItem_result__isset;

class BackendMiddleware_deleteAllItem_result {
 public:

  BackendMiddleware_deleteAllItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteAllItem_result() throw() {}

  bool success;

  _BackendMiddleware_deleteAllItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteAllItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllItem_presult__isset {
  _BackendMiddleware_deleteAllItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllItem_presult__isset;

class BackendMiddleware_deleteAllItem_presult {
 public:


  virtual ~BackendMiddleware_deleteAllItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteAllItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_editItem_args__isset {
  _BackendMiddleware_editItem_args__isset() : itemID(false), newItemValue(false), newTagIDs(false) {}
  bool itemID;
  bool newItemValue;
  bool newTagIDs;
} _BackendMiddleware_editItem_args__isset;

class BackendMiddleware_editItem_args {
 public:

  BackendMiddleware_editItem_args() : itemID(), newItemValue() {
  }

  virtual ~BackendMiddleware_editItem_args() throw() {}

  std::string itemID;
  std::string newItemValue;
  std::vector<std::string>  newTagIDs;

  _BackendMiddleware_editItem_args__isset __isset;

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  void __set_newItemValue(const std::string& val) {
    newItemValue = val;
  }

  void __set_newTagIDs(const std::vector<std::string> & val) {
    newTagIDs = val;
  }

  bool operator == (const BackendMiddleware_editItem_args & rhs) const
  {
    if (!(itemID == rhs.itemID))
      return false;
    if (!(newItemValue == rhs.newItemValue))
      return false;
    if (!(newTagIDs == rhs.newTagIDs))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_editItem_pargs {
 public:


  virtual ~BackendMiddleware_editItem_pargs() throw() {}

  const std::string* itemID;
  const std::string* newItemValue;
  const std::vector<std::string> * newTagIDs;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editItem_result__isset {
  _BackendMiddleware_editItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editItem_result__isset;

class BackendMiddleware_editItem_result {
 public:

  BackendMiddleware_editItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_editItem_result() throw() {}

  bool success;

  _BackendMiddleware_editItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_editItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editItem_presult__isset {
  _BackendMiddleware_editItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editItem_presult__isset;

class BackendMiddleware_editItem_presult {
 public:


  virtual ~BackendMiddleware_editItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_editItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemsPage_args__isset {
  _BackendMiddleware_getItemsPage_args__isset() : pageNumber(false), itemNumber(false), tagID(false) {}
  bool pageNumber;
  bool itemNumber;
  bool tagID;
} _BackendMiddleware_getItemsPage_args__isset;

class BackendMiddleware_getItemsPage_args {
 public:

  BackendMiddleware_getItemsPage_args() : pageNumber(0), itemNumber(0), tagID() {
  }

  virtual ~BackendMiddleware_getItemsPage_args() throw() {}

  int64_t pageNumber;
  int64_t itemNumber;
  std::string tagID;

  _BackendMiddleware_getItemsPage_args__isset __isset;

  void __set_pageNumber(const int64_t val) {
    pageNumber = val;
  }

  void __set_itemNumber(const int64_t val) {
    itemNumber = val;
  }

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getItemsPage_args & rhs) const
  {
    if (!(pageNumber == rhs.pageNumber))
      return false;
    if (!(itemNumber == rhs.itemNumber))
      return false;
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsPage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsPage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemsPage_pargs {
 public:


  virtual ~BackendMiddleware_getItemsPage_pargs() throw() {}

  const int64_t* pageNumber;
  const int64_t* itemNumber;
  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsPage_result__isset {
  _BackendMiddleware_getItemsPage_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsPage_result__isset;

class BackendMiddleware_getItemsPage_result {
 public:

  BackendMiddleware_getItemsPage_result() {
  }

  virtual ~BackendMiddleware_getItemsPage_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getItemsPage_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemsPage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsPage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsPage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsPage_presult__isset {
  _BackendMiddleware_getItemsPage_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsPage_presult__isset;

class BackendMiddleware_getItemsPage_presult {
 public:


  virtual ~BackendMiddleware_getItemsPage_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getItemsPage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemKeyword_args__isset {
  _BackendMiddleware_getItemKeyword_args__isset() : keyWord(false) {}
  bool keyWord;
} _BackendMiddleware_getItemKeyword_args__isset;

class BackendMiddleware_getItemKeyword_args {
 public:

  BackendMiddleware_getItemKeyword_args() : keyWord() {
  }

  virtual ~BackendMiddleware_getItemKeyword_args() throw() {}

  std::string keyWord;

  _BackendMiddleware_getItemKeyword_args__isset __isset;

  void __set_keyWord(const std::string& val) {
    keyWord = val;
  }

  bool operator == (const BackendMiddleware_getItemKeyword_args & rhs) const
  {
    if (!(keyWord == rhs.keyWord))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemKeyword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemKeyword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemKeyword_pargs {
 public:


  virtual ~BackendMiddleware_getItemKeyword_pargs() throw() {}

  const std::string* keyWord;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemKeyword_result__isset {
  _BackendMiddleware_getItemKeyword_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemKeyword_result__isset;

class BackendMiddleware_getItemKeyword_result {
 public:

  BackendMiddleware_getItemKeyword_result() {
  }

  virtual ~BackendMiddleware_getItemKeyword_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getItemKeyword_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemKeyword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemKeyword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemKeyword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemKeyword_presult__isset {
  _BackendMiddleware_getItemKeyword_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemKeyword_presult__isset;

class BackendMiddleware_getItemKeyword_presult {
 public:


  virtual ~BackendMiddleware_getItemKeyword_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getItemKeyword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemsPageKeyword_args__isset {
  _BackendMiddleware_getItemsPageKeyword_args__isset() : keyWord(false), pageNumber(false), itemNumber(false) {}
  bool keyWord;
  bool pageNumber;
  bool itemNumber;
} _BackendMiddleware_getItemsPageKeyword_args__isset;

class BackendMiddleware_getItemsPageKeyword_args {
 public:

  BackendMiddleware_getItemsPageKeyword_args() : keyWord(), pageNumber(0), itemNumber(0) {
  }

  virtual ~BackendMiddleware_getItemsPageKeyword_args() throw() {}

  std::string keyWord;
  int64_t pageNumber;
  int64_t itemNumber;

  _BackendMiddleware_getItemsPageKeyword_args__isset __isset;

  void __set_keyWord(const std::string& val) {
    keyWord = val;
  }

  void __set_pageNumber(const int64_t val) {
    pageNumber = val;
  }

  void __set_itemNumber(const int64_t val) {
    itemNumber = val;
  }

  bool operator == (const BackendMiddleware_getItemsPageKeyword_args & rhs) const
  {
    if (!(keyWord == rhs.keyWord))
      return false;
    if (!(pageNumber == rhs.pageNumber))
      return false;
    if (!(itemNumber == rhs.itemNumber))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsPageKeyword_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsPageKeyword_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemsPageKeyword_pargs {
 public:


  virtual ~BackendMiddleware_getItemsPageKeyword_pargs() throw() {}

  const std::string* keyWord;
  const int64_t* pageNumber;
  const int64_t* itemNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsPageKeyword_result__isset {
  _BackendMiddleware_getItemsPageKeyword_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsPageKeyword_result__isset;

class BackendMiddleware_getItemsPageKeyword_result {
 public:

  BackendMiddleware_getItemsPageKeyword_result() {
  }

  virtual ~BackendMiddleware_getItemsPageKeyword_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getItemsPageKeyword_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemsPageKeyword_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemsPageKeyword_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemsPageKeyword_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemsPageKeyword_presult__isset {
  _BackendMiddleware_getItemsPageKeyword_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemsPageKeyword_presult__isset;

class BackendMiddleware_getItemsPageKeyword_presult {
 public:


  virtual ~BackendMiddleware_getItemsPageKeyword_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getItemsPageKeyword_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getItemKeywordTag_args__isset {
  _BackendMiddleware_getItemKeywordTag_args__isset() : keyWord(false), tagID(false) {}
  bool keyWord;
  bool tagID;
} _BackendMiddleware_getItemKeywordTag_args__isset;

class BackendMiddleware_getItemKeywordTag_args {
 public:

  BackendMiddleware_getItemKeywordTag_args() : keyWord(), tagID() {
  }

  virtual ~BackendMiddleware_getItemKeywordTag_args() throw() {}

  std::string keyWord;
  std::string tagID;

  _BackendMiddleware_getItemKeywordTag_args__isset __isset;

  void __set_keyWord(const std::string& val) {
    keyWord = val;
  }

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getItemKeywordTag_args & rhs) const
  {
    if (!(keyWord == rhs.keyWord))
      return false;
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemKeywordTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemKeywordTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getItemKeywordTag_pargs {
 public:


  virtual ~BackendMiddleware_getItemKeywordTag_pargs() throw() {}

  const std::string* keyWord;
  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemKeywordTag_result__isset {
  _BackendMiddleware_getItemKeywordTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemKeywordTag_result__isset;

class BackendMiddleware_getItemKeywordTag_result {
 public:

  BackendMiddleware_getItemKeywordTag_result() {
  }

  virtual ~BackendMiddleware_getItemKeywordTag_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getItemKeywordTag_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getItemKeywordTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getItemKeywordTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getItemKeywordTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getItemKeywordTag_presult__isset {
  _BackendMiddleware_getItemKeywordTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getItemKeywordTag_presult__isset;

class BackendMiddleware_getItemKeywordTag_presult {
 public:


  virtual ~BackendMiddleware_getItemKeywordTag_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getItemKeywordTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getTopItems_args__isset {
  _BackendMiddleware_getTopItems_args__isset() : number(false) {}
  bool number;
} _BackendMiddleware_getTopItems_args__isset;

class BackendMiddleware_getTopItems_args {
 public:

  BackendMiddleware_getTopItems_args() : number(0) {
  }

  virtual ~BackendMiddleware_getTopItems_args() throw() {}

  int64_t number;

  _BackendMiddleware_getTopItems_args__isset __isset;

  void __set_number(const int64_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getTopItems_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getTopItems_pargs {
 public:


  virtual ~BackendMiddleware_getTopItems_pargs() throw() {}

  const int64_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopItems_result__isset {
  _BackendMiddleware_getTopItems_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopItems_result__isset;

class BackendMiddleware_getTopItems_result {
 public:

  BackendMiddleware_getTopItems_result() {
  }

  virtual ~BackendMiddleware_getTopItems_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getTopItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getTopItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopItems_presult__isset {
  _BackendMiddleware_getTopItems_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopItems_presult__isset;

class BackendMiddleware_getTopItems_presult {
 public:


  virtual ~BackendMiddleware_getTopItems_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getTopItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getTopItemsofTag_args__isset {
  _BackendMiddleware_getTopItemsofTag_args__isset() : number(false), tagID(false) {}
  bool number;
  bool tagID;
} _BackendMiddleware_getTopItemsofTag_args__isset;

class BackendMiddleware_getTopItemsofTag_args {
 public:

  BackendMiddleware_getTopItemsofTag_args() : number(0), tagID() {
  }

  virtual ~BackendMiddleware_getTopItemsofTag_args() throw() {}

  int64_t number;
  std::string tagID;

  _BackendMiddleware_getTopItemsofTag_args__isset __isset;

  void __set_number(const int64_t val) {
    number = val;
  }

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getTopItemsofTag_args & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopItemsofTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopItemsofTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getTopItemsofTag_pargs {
 public:


  virtual ~BackendMiddleware_getTopItemsofTag_pargs() throw() {}

  const int64_t* number;
  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopItemsofTag_result__isset {
  _BackendMiddleware_getTopItemsofTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopItemsofTag_result__isset;

class BackendMiddleware_getTopItemsofTag_result {
 public:

  BackendMiddleware_getTopItemsofTag_result() {
  }

  virtual ~BackendMiddleware_getTopItemsofTag_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getTopItemsofTag_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getTopItemsofTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getTopItemsofTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getTopItemsofTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getTopItemsofTag_presult__isset {
  _BackendMiddleware_getTopItemsofTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getTopItemsofTag_presult__isset;

class BackendMiddleware_getTopItemsofTag_presult {
 public:


  virtual ~BackendMiddleware_getTopItemsofTag_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getTopItemsofTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getFavouriteItems_args__isset {
  _BackendMiddleware_getFavouriteItems_args__isset() : userID(false), number(false) {}
  bool userID;
  bool number;
} _BackendMiddleware_getFavouriteItems_args__isset;

class BackendMiddleware_getFavouriteItems_args {
 public:

  BackendMiddleware_getFavouriteItems_args() : userID(), number(0) {
  }

  virtual ~BackendMiddleware_getFavouriteItems_args() throw() {}

  std::string userID;
  int64_t number;

  _BackendMiddleware_getFavouriteItems_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_number(const int64_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getFavouriteItems_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getFavouriteItems_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getFavouriteItems_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getFavouriteItems_pargs {
 public:


  virtual ~BackendMiddleware_getFavouriteItems_pargs() throw() {}

  const std::string* userID;
  const int64_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getFavouriteItems_result__isset {
  _BackendMiddleware_getFavouriteItems_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getFavouriteItems_result__isset;

class BackendMiddleware_getFavouriteItems_result {
 public:

  BackendMiddleware_getFavouriteItems_result() {
  }

  virtual ~BackendMiddleware_getFavouriteItems_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getFavouriteItems_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getFavouriteItems_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getFavouriteItems_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getFavouriteItems_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getFavouriteItems_presult__isset {
  _BackendMiddleware_getFavouriteItems_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getFavouriteItems_presult__isset;

class BackendMiddleware_getFavouriteItems_presult {
 public:


  virtual ~BackendMiddleware_getFavouriteItems_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getFavouriteItems_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getFavouriteItemsofTag_args__isset {
  _BackendMiddleware_getFavouriteItemsofTag_args__isset() : userID(false), number(false), tagID(false) {}
  bool userID;
  bool number;
  bool tagID;
} _BackendMiddleware_getFavouriteItemsofTag_args__isset;

class BackendMiddleware_getFavouriteItemsofTag_args {
 public:

  BackendMiddleware_getFavouriteItemsofTag_args() : userID(), number(0), tagID() {
  }

  virtual ~BackendMiddleware_getFavouriteItemsofTag_args() throw() {}

  std::string userID;
  int64_t number;
  std::string tagID;

  _BackendMiddleware_getFavouriteItemsofTag_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_number(const int64_t val) {
    number = val;
  }

  void __set_tagID(const std::string& val) {
    tagID = val;
  }

  bool operator == (const BackendMiddleware_getFavouriteItemsofTag_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(tagID == rhs.tagID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getFavouriteItemsofTag_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getFavouriteItemsofTag_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getFavouriteItemsofTag_pargs {
 public:


  virtual ~BackendMiddleware_getFavouriteItemsofTag_pargs() throw() {}

  const std::string* userID;
  const int64_t* number;
  const std::string* tagID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getFavouriteItemsofTag_result__isset {
  _BackendMiddleware_getFavouriteItemsofTag_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getFavouriteItemsofTag_result__isset;

class BackendMiddleware_getFavouriteItemsofTag_result {
 public:

  BackendMiddleware_getFavouriteItemsofTag_result() {
  }

  virtual ~BackendMiddleware_getFavouriteItemsofTag_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getFavouriteItemsofTag_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getFavouriteItemsofTag_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getFavouriteItemsofTag_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getFavouriteItemsofTag_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getFavouriteItemsofTag_presult__isset {
  _BackendMiddleware_getFavouriteItemsofTag_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getFavouriteItemsofTag_presult__isset;

class BackendMiddleware_getFavouriteItemsofTag_presult {
 public:


  virtual ~BackendMiddleware_getFavouriteItemsofTag_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getFavouriteItemsofTag_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_insertFavouriteItem_args__isset {
  _BackendMiddleware_insertFavouriteItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_insertFavouriteItem_args__isset;

class BackendMiddleware_insertFavouriteItem_args {
 public:

  BackendMiddleware_insertFavouriteItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_insertFavouriteItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_insertFavouriteItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_insertFavouriteItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertFavouriteItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertFavouriteItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_insertFavouriteItem_pargs {
 public:


  virtual ~BackendMiddleware_insertFavouriteItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertFavouriteItem_result__isset {
  _BackendMiddleware_insertFavouriteItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertFavouriteItem_result__isset;

class BackendMiddleware_insertFavouriteItem_result {
 public:

  BackendMiddleware_insertFavouriteItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_insertFavouriteItem_result() throw() {}

  bool success;

  _BackendMiddleware_insertFavouriteItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_insertFavouriteItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertFavouriteItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertFavouriteItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertFavouriteItem_presult__isset {
  _BackendMiddleware_insertFavouriteItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertFavouriteItem_presult__isset;

class BackendMiddleware_insertFavouriteItem_presult {
 public:


  virtual ~BackendMiddleware_insertFavouriteItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_insertFavouriteItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteFavouriteItem_args__isset {
  _BackendMiddleware_deleteFavouriteItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_deleteFavouriteItem_args__isset;

class BackendMiddleware_deleteFavouriteItem_args {
 public:

  BackendMiddleware_deleteFavouriteItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_deleteFavouriteItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_deleteFavouriteItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_deleteFavouriteItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteFavouriteItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteFavouriteItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteFavouriteItem_pargs {
 public:


  virtual ~BackendMiddleware_deleteFavouriteItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteFavouriteItem_result__isset {
  _BackendMiddleware_deleteFavouriteItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteFavouriteItem_result__isset;

class BackendMiddleware_deleteFavouriteItem_result {
 public:

  BackendMiddleware_deleteFavouriteItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteFavouriteItem_result() throw() {}

  bool success;

  _BackendMiddleware_deleteFavouriteItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteFavouriteItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteFavouriteItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteFavouriteItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteFavouriteItem_presult__isset {
  _BackendMiddleware_deleteFavouriteItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteFavouriteItem_presult__isset;

class BackendMiddleware_deleteFavouriteItem_presult {
 public:


  virtual ~BackendMiddleware_deleteFavouriteItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteFavouriteItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemsIDLike_args__isset {
  _BackendMiddleware_getAllItemsIDLike_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_getAllItemsIDLike_args__isset;

class BackendMiddleware_getAllItemsIDLike_args {
 public:

  BackendMiddleware_getAllItemsIDLike_args() : userID() {
  }

  virtual ~BackendMiddleware_getAllItemsIDLike_args() throw() {}

  std::string userID;

  _BackendMiddleware_getAllItemsIDLike_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDLike_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDLike_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDLike_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemsIDLike_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemsIDLike_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDLike_result__isset {
  _BackendMiddleware_getAllItemsIDLike_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDLike_result__isset;

class BackendMiddleware_getAllItemsIDLike_result {
 public:

  BackendMiddleware_getAllItemsIDLike_result() {
  }

  virtual ~BackendMiddleware_getAllItemsIDLike_result() throw() {}

  std::vector<std::string>  success;

  _BackendMiddleware_getAllItemsIDLike_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDLike_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDLike_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDLike_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDLike_presult__isset {
  _BackendMiddleware_getAllItemsIDLike_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDLike_presult__isset;

class BackendMiddleware_getAllItemsIDLike_presult {
 public:


  virtual ~BackendMiddleware_getAllItemsIDLike_presult() throw() {}

  std::vector<std::string> * success;

  _BackendMiddleware_getAllItemsIDLike_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemsLike_args__isset {
  _BackendMiddleware_getAllItemsLike_args__isset() : userID(false), number(false) {}
  bool userID;
  bool number;
} _BackendMiddleware_getAllItemsLike_args__isset;

class BackendMiddleware_getAllItemsLike_args {
 public:

  BackendMiddleware_getAllItemsLike_args() : userID(), number(0) {
  }

  virtual ~BackendMiddleware_getAllItemsLike_args() throw() {}

  std::string userID;
  int32_t number;

  _BackendMiddleware_getAllItemsLike_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_number(const int32_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsLike_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsLike_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsLike_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemsLike_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemsLike_pargs() throw() {}

  const std::string* userID;
  const int32_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsLike_result__isset {
  _BackendMiddleware_getAllItemsLike_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsLike_result__isset;

class BackendMiddleware_getAllItemsLike_result {
 public:

  BackendMiddleware_getAllItemsLike_result() {
  }

  virtual ~BackendMiddleware_getAllItemsLike_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getAllItemsLike_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsLike_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsLike_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsLike_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsLike_presult__isset {
  _BackendMiddleware_getAllItemsLike_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsLike_presult__isset;

class BackendMiddleware_getAllItemsLike_presult {
 public:


  virtual ~BackendMiddleware_getAllItemsLike_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getAllItemsLike_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_insertLikedItem_args__isset {
  _BackendMiddleware_insertLikedItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_insertLikedItem_args__isset;

class BackendMiddleware_insertLikedItem_args {
 public:

  BackendMiddleware_insertLikedItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_insertLikedItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_insertLikedItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_insertLikedItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertLikedItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertLikedItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_insertLikedItem_pargs {
 public:


  virtual ~BackendMiddleware_insertLikedItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertLikedItem_result__isset {
  _BackendMiddleware_insertLikedItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertLikedItem_result__isset;

class BackendMiddleware_insertLikedItem_result {
 public:

  BackendMiddleware_insertLikedItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_insertLikedItem_result() throw() {}

  bool success;

  _BackendMiddleware_insertLikedItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_insertLikedItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertLikedItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertLikedItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertLikedItem_presult__isset {
  _BackendMiddleware_insertLikedItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertLikedItem_presult__isset;

class BackendMiddleware_insertLikedItem_presult {
 public:


  virtual ~BackendMiddleware_insertLikedItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_insertLikedItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteLikedItem_args__isset {
  _BackendMiddleware_deleteLikedItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_deleteLikedItem_args__isset;

class BackendMiddleware_deleteLikedItem_args {
 public:

  BackendMiddleware_deleteLikedItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_deleteLikedItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_deleteLikedItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_deleteLikedItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteLikedItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteLikedItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteLikedItem_pargs {
 public:


  virtual ~BackendMiddleware_deleteLikedItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteLikedItem_result__isset {
  _BackendMiddleware_deleteLikedItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteLikedItem_result__isset;

class BackendMiddleware_deleteLikedItem_result {
 public:

  BackendMiddleware_deleteLikedItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteLikedItem_result() throw() {}

  bool success;

  _BackendMiddleware_deleteLikedItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteLikedItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteLikedItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteLikedItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteLikedItem_presult__isset {
  _BackendMiddleware_deleteLikedItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteLikedItem_presult__isset;

class BackendMiddleware_deleteLikedItem_presult {
 public:


  virtual ~BackendMiddleware_deleteLikedItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteLikedItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemsIDDislike_args__isset {
  _BackendMiddleware_getAllItemsIDDislike_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_getAllItemsIDDislike_args__isset;

class BackendMiddleware_getAllItemsIDDislike_args {
 public:

  BackendMiddleware_getAllItemsIDDislike_args() : userID() {
  }

  virtual ~BackendMiddleware_getAllItemsIDDislike_args() throw() {}

  std::string userID;

  _BackendMiddleware_getAllItemsIDDislike_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDDislike_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDDislike_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDDislike_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemsIDDislike_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemsIDDislike_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDDislike_result__isset {
  _BackendMiddleware_getAllItemsIDDislike_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDDislike_result__isset;

class BackendMiddleware_getAllItemsIDDislike_result {
 public:

  BackendMiddleware_getAllItemsIDDislike_result() {
  }

  virtual ~BackendMiddleware_getAllItemsIDDislike_result() throw() {}

  std::vector<std::string>  success;

  _BackendMiddleware_getAllItemsIDDislike_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsIDDislike_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsIDDislike_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsIDDislike_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsIDDislike_presult__isset {
  _BackendMiddleware_getAllItemsIDDislike_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsIDDislike_presult__isset;

class BackendMiddleware_getAllItemsIDDislike_presult {
 public:


  virtual ~BackendMiddleware_getAllItemsIDDislike_presult() throw() {}

  std::vector<std::string> * success;

  _BackendMiddleware_getAllItemsIDDislike_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getAllItemsDislike_args__isset {
  _BackendMiddleware_getAllItemsDislike_args__isset() : userID(false), number(false) {}
  bool userID;
  bool number;
} _BackendMiddleware_getAllItemsDislike_args__isset;

class BackendMiddleware_getAllItemsDislike_args {
 public:

  BackendMiddleware_getAllItemsDislike_args() : userID(), number(0) {
  }

  virtual ~BackendMiddleware_getAllItemsDislike_args() throw() {}

  std::string userID;
  int32_t number;

  _BackendMiddleware_getAllItemsDislike_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_number(const int32_t val) {
    number = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsDislike_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsDislike_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsDislike_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllItemsDislike_pargs {
 public:


  virtual ~BackendMiddleware_getAllItemsDislike_pargs() throw() {}

  const std::string* userID;
  const int32_t* number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsDislike_result__isset {
  _BackendMiddleware_getAllItemsDislike_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsDislike_result__isset;

class BackendMiddleware_getAllItemsDislike_result {
 public:

  BackendMiddleware_getAllItemsDislike_result() {
  }

  virtual ~BackendMiddleware_getAllItemsDislike_result() throw() {}

  std::vector<Item>  success;

  _BackendMiddleware_getAllItemsDislike_result__isset __isset;

  void __set_success(const std::vector<Item> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllItemsDislike_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllItemsDislike_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllItemsDislike_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllItemsDislike_presult__isset {
  _BackendMiddleware_getAllItemsDislike_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllItemsDislike_presult__isset;

class BackendMiddleware_getAllItemsDislike_presult {
 public:


  virtual ~BackendMiddleware_getAllItemsDislike_presult() throw() {}

  std::vector<Item> * success;

  _BackendMiddleware_getAllItemsDislike_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_insertDislikedItem_args__isset {
  _BackendMiddleware_insertDislikedItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_insertDislikedItem_args__isset;

class BackendMiddleware_insertDislikedItem_args {
 public:

  BackendMiddleware_insertDislikedItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_insertDislikedItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_insertDislikedItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_insertDislikedItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertDislikedItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertDislikedItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_insertDislikedItem_pargs {
 public:


  virtual ~BackendMiddleware_insertDislikedItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertDislikedItem_result__isset {
  _BackendMiddleware_insertDislikedItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertDislikedItem_result__isset;

class BackendMiddleware_insertDislikedItem_result {
 public:

  BackendMiddleware_insertDislikedItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_insertDislikedItem_result() throw() {}

  bool success;

  _BackendMiddleware_insertDislikedItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_insertDislikedItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_insertDislikedItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_insertDislikedItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_insertDislikedItem_presult__isset {
  _BackendMiddleware_insertDislikedItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_insertDislikedItem_presult__isset;

class BackendMiddleware_insertDislikedItem_presult {
 public:


  virtual ~BackendMiddleware_insertDislikedItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_insertDislikedItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteDislikedItem_args__isset {
  _BackendMiddleware_deleteDislikedItem_args__isset() : userID(false), itemID(false) {}
  bool userID;
  bool itemID;
} _BackendMiddleware_deleteDislikedItem_args__isset;

class BackendMiddleware_deleteDislikedItem_args {
 public:

  BackendMiddleware_deleteDislikedItem_args() : userID(), itemID() {
  }

  virtual ~BackendMiddleware_deleteDislikedItem_args() throw() {}

  std::string userID;
  std::string itemID;

  _BackendMiddleware_deleteDislikedItem_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_itemID(const std::string& val) {
    itemID = val;
  }

  bool operator == (const BackendMiddleware_deleteDislikedItem_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(itemID == rhs.itemID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteDislikedItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteDislikedItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteDislikedItem_pargs {
 public:


  virtual ~BackendMiddleware_deleteDislikedItem_pargs() throw() {}

  const std::string* userID;
  const std::string* itemID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteDislikedItem_result__isset {
  _BackendMiddleware_deleteDislikedItem_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteDislikedItem_result__isset;

class BackendMiddleware_deleteDislikedItem_result {
 public:

  BackendMiddleware_deleteDislikedItem_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteDislikedItem_result() throw() {}

  bool success;

  _BackendMiddleware_deleteDislikedItem_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteDislikedItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteDislikedItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteDislikedItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteDislikedItem_presult__isset {
  _BackendMiddleware_deleteDislikedItem_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteDislikedItem_presult__isset;

class BackendMiddleware_deleteDislikedItem_presult {
 public:


  virtual ~BackendMiddleware_deleteDislikedItem_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteDislikedItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_userExisted_args__isset {
  _BackendMiddleware_userExisted_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_userExisted_args__isset;

class BackendMiddleware_userExisted_args {
 public:

  BackendMiddleware_userExisted_args() : userID() {
  }

  virtual ~BackendMiddleware_userExisted_args() throw() {}

  std::string userID;

  _BackendMiddleware_userExisted_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_userExisted_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_userExisted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_userExisted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_userExisted_pargs {
 public:


  virtual ~BackendMiddleware_userExisted_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_userExisted_result__isset {
  _BackendMiddleware_userExisted_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_userExisted_result__isset;

class BackendMiddleware_userExisted_result {
 public:

  BackendMiddleware_userExisted_result() : success(0) {
  }

  virtual ~BackendMiddleware_userExisted_result() throw() {}

  bool success;

  _BackendMiddleware_userExisted_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_userExisted_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_userExisted_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_userExisted_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_userExisted_presult__isset {
  _BackendMiddleware_userExisted_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_userExisted_presult__isset;

class BackendMiddleware_userExisted_presult {
 public:


  virtual ~BackendMiddleware_userExisted_presult() throw() {}

  bool* success;

  _BackendMiddleware_userExisted_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_blockUser_args__isset {
  _BackendMiddleware_blockUser_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_blockUser_args__isset;

class BackendMiddleware_blockUser_args {
 public:

  BackendMiddleware_blockUser_args() : userID() {
  }

  virtual ~BackendMiddleware_blockUser_args() throw() {}

  std::string userID;

  _BackendMiddleware_blockUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_blockUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_blockUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_blockUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_blockUser_pargs {
 public:


  virtual ~BackendMiddleware_blockUser_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_blockUser_result__isset {
  _BackendMiddleware_blockUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_blockUser_result__isset;

class BackendMiddleware_blockUser_result {
 public:

  BackendMiddleware_blockUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_blockUser_result() throw() {}

  bool success;

  _BackendMiddleware_blockUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_blockUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_blockUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_blockUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_blockUser_presult__isset {
  _BackendMiddleware_blockUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_blockUser_presult__isset;

class BackendMiddleware_blockUser_presult {
 public:


  virtual ~BackendMiddleware_blockUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_blockUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_unblockUser_args__isset {
  _BackendMiddleware_unblockUser_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_unblockUser_args__isset;

class BackendMiddleware_unblockUser_args {
 public:

  BackendMiddleware_unblockUser_args() : userID() {
  }

  virtual ~BackendMiddleware_unblockUser_args() throw() {}

  std::string userID;

  _BackendMiddleware_unblockUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_unblockUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_unblockUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_unblockUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_unblockUser_pargs {
 public:


  virtual ~BackendMiddleware_unblockUser_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_unblockUser_result__isset {
  _BackendMiddleware_unblockUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_unblockUser_result__isset;

class BackendMiddleware_unblockUser_result {
 public:

  BackendMiddleware_unblockUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_unblockUser_result() throw() {}

  bool success;

  _BackendMiddleware_unblockUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_unblockUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_unblockUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_unblockUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_unblockUser_presult__isset {
  _BackendMiddleware_unblockUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_unblockUser_presult__isset;

class BackendMiddleware_unblockUser_presult {
 public:


  virtual ~BackendMiddleware_unblockUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_unblockUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_addUser_args__isset {
  _BackendMiddleware_addUser_args__isset() : userID(false), userToken(false), userRole(false) {}
  bool userID;
  bool userToken;
  bool userRole;
} _BackendMiddleware_addUser_args__isset;

class BackendMiddleware_addUser_args {
 public:

  BackendMiddleware_addUser_args() : userID(), userToken(), userRole(0) {
  }

  virtual ~BackendMiddleware_addUser_args() throw() {}

  std::string userID;
  std::string userToken;
  int32_t userRole;

  _BackendMiddleware_addUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_userToken(const std::string& val) {
    userToken = val;
  }

  void __set_userRole(const int32_t val) {
    userRole = val;
  }

  bool operator == (const BackendMiddleware_addUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(userToken == rhs.userToken))
      return false;
    if (!(userRole == rhs.userRole))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_addUser_pargs {
 public:


  virtual ~BackendMiddleware_addUser_pargs() throw() {}

  const std::string* userID;
  const std::string* userToken;
  const int32_t* userRole;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_addUser_result__isset {
  _BackendMiddleware_addUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_addUser_result__isset;

class BackendMiddleware_addUser_result {
 public:

  BackendMiddleware_addUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_addUser_result() throw() {}

  bool success;

  _BackendMiddleware_addUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_addUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_addUser_presult__isset {
  _BackendMiddleware_addUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_addUser_presult__isset;

class BackendMiddleware_addUser_presult {
 public:


  virtual ~BackendMiddleware_addUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_addUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_deleteUser_args__isset {
  _BackendMiddleware_deleteUser_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_deleteUser_args__isset;

class BackendMiddleware_deleteUser_args {
 public:

  BackendMiddleware_deleteUser_args() : userID() {
  }

  virtual ~BackendMiddleware_deleteUser_args() throw() {}

  std::string userID;

  _BackendMiddleware_deleteUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_deleteUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteUser_pargs {
 public:


  virtual ~BackendMiddleware_deleteUser_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteUser_result__isset {
  _BackendMiddleware_deleteUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteUser_result__isset;

class BackendMiddleware_deleteUser_result {
 public:

  BackendMiddleware_deleteUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteUser_result() throw() {}

  bool success;

  _BackendMiddleware_deleteUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteUser_presult__isset {
  _BackendMiddleware_deleteUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteUser_presult__isset;

class BackendMiddleware_deleteUser_presult {
 public:


  virtual ~BackendMiddleware_deleteUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_editUser_args__isset {
  _BackendMiddleware_editUser_args__isset() : userID(false), userToken(false), userRole(false) {}
  bool userID;
  bool userToken;
  bool userRole;
} _BackendMiddleware_editUser_args__isset;

class BackendMiddleware_editUser_args {
 public:

  BackendMiddleware_editUser_args() : userID(), userToken(), userRole(0) {
  }

  virtual ~BackendMiddleware_editUser_args() throw() {}

  std::string userID;
  std::string userToken;
  int32_t userRole;

  _BackendMiddleware_editUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  void __set_userToken(const std::string& val) {
    userToken = val;
  }

  void __set_userRole(const int32_t val) {
    userRole = val;
  }

  bool operator == (const BackendMiddleware_editUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    if (!(userToken == rhs.userToken))
      return false;
    if (!(userRole == rhs.userRole))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_editUser_pargs {
 public:


  virtual ~BackendMiddleware_editUser_pargs() throw() {}

  const std::string* userID;
  const std::string* userToken;
  const int32_t* userRole;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editUser_result__isset {
  _BackendMiddleware_editUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editUser_result__isset;

class BackendMiddleware_editUser_result {
 public:

  BackendMiddleware_editUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_editUser_result() throw() {}

  bool success;

  _BackendMiddleware_editUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_editUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_editUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_editUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_editUser_presult__isset {
  _BackendMiddleware_editUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_editUser_presult__isset;

class BackendMiddleware_editUser_presult {
 public:


  virtual ~BackendMiddleware_editUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_editUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_deleteAllUser_args {
 public:

  BackendMiddleware_deleteAllUser_args() {
  }

  virtual ~BackendMiddleware_deleteAllUser_args() throw() {}


  bool operator == (const BackendMiddleware_deleteAllUser_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_deleteAllUser_pargs {
 public:


  virtual ~BackendMiddleware_deleteAllUser_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllUser_result__isset {
  _BackendMiddleware_deleteAllUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllUser_result__isset;

class BackendMiddleware_deleteAllUser_result {
 public:

  BackendMiddleware_deleteAllUser_result() : success(0) {
  }

  virtual ~BackendMiddleware_deleteAllUser_result() throw() {}

  bool success;

  _BackendMiddleware_deleteAllUser_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_deleteAllUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_deleteAllUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_deleteAllUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_deleteAllUser_presult__isset {
  _BackendMiddleware_deleteAllUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_deleteAllUser_presult__isset;

class BackendMiddleware_deleteAllUser_presult {
 public:


  virtual ~BackendMiddleware_deleteAllUser_presult() throw() {}

  bool* success;

  _BackendMiddleware_deleteAllUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _BackendMiddleware_getUser_args__isset {
  _BackendMiddleware_getUser_args__isset() : userID(false) {}
  bool userID;
} _BackendMiddleware_getUser_args__isset;

class BackendMiddleware_getUser_args {
 public:

  BackendMiddleware_getUser_args() : userID() {
  }

  virtual ~BackendMiddleware_getUser_args() throw() {}

  std::string userID;

  _BackendMiddleware_getUser_args__isset __isset;

  void __set_userID(const std::string& val) {
    userID = val;
  }

  bool operator == (const BackendMiddleware_getUser_args & rhs) const
  {
    if (!(userID == rhs.userID))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getUser_pargs {
 public:


  virtual ~BackendMiddleware_getUser_pargs() throw() {}

  const std::string* userID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getUser_result__isset {
  _BackendMiddleware_getUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getUser_result__isset;

class BackendMiddleware_getUser_result {
 public:

  BackendMiddleware_getUser_result() {
  }

  virtual ~BackendMiddleware_getUser_result() throw() {}

  User success;

  _BackendMiddleware_getUser_result__isset __isset;

  void __set_success(const User& val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getUser_presult__isset {
  _BackendMiddleware_getUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getUser_presult__isset;

class BackendMiddleware_getUser_presult {
 public:


  virtual ~BackendMiddleware_getUser_presult() throw() {}

  User* success;

  _BackendMiddleware_getUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class BackendMiddleware_getAllUser_args {
 public:

  BackendMiddleware_getAllUser_args() {
  }

  virtual ~BackendMiddleware_getAllUser_args() throw() {}


  bool operator == (const BackendMiddleware_getAllUser_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const BackendMiddleware_getAllUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class BackendMiddleware_getAllUser_pargs {
 public:


  virtual ~BackendMiddleware_getAllUser_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllUser_result__isset {
  _BackendMiddleware_getAllUser_result__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllUser_result__isset;

class BackendMiddleware_getAllUser_result {
 public:

  BackendMiddleware_getAllUser_result() {
  }

  virtual ~BackendMiddleware_getAllUser_result() throw() {}

  std::vector<std::string>  success;

  _BackendMiddleware_getAllUser_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const BackendMiddleware_getAllUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const BackendMiddleware_getAllUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BackendMiddleware_getAllUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _BackendMiddleware_getAllUser_presult__isset {
  _BackendMiddleware_getAllUser_presult__isset() : success(false) {}
  bool success;
} _BackendMiddleware_getAllUser_presult__isset;

class BackendMiddleware_getAllUser_presult {
 public:


  virtual ~BackendMiddleware_getAllUser_presult() throw() {}

  std::vector<std::string> * success;

  _BackendMiddleware_getAllUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class BackendMiddlewareClient : virtual public BackendMiddlewareIf {
 public:
  BackendMiddlewareClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  BackendMiddlewareClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t itemdbSize();
  void send_itemdbSize();
  int64_t recv_itemdbSize();
  int64_t tagdbSize();
  void send_tagdbSize();
  int64_t recv_tagdbSize();
  int64_t itemtagdbSize();
  void send_itemtagdbSize();
  int64_t recv_itemtagdbSize();
  int64_t itemtagSize(const std::string& tagID);
  void send_itemtagSize(const std::string& tagID);
  int64_t recv_itemtagSize();
  int64_t userdbSize();
  void send_userdbSize();
  int64_t recv_userdbSize();
  int64_t itemsLikeSize(const std::string& userID);
  void send_itemsLikeSize(const std::string& userID);
  int64_t recv_itemsLikeSize();
  int64_t itemsDislikeSize(const std::string& userID);
  void send_itemsDislikeSize(const std::string& userID);
  int64_t recv_itemsDislikeSize();
  int64_t favouriteItemsSize(const std::string& userID);
  void send_favouriteItemsSize(const std::string& userID);
  int64_t recv_favouriteItemsSize();
  void getAllTag(std::vector<Tag> & _return);
  void send_getAllTag();
  void recv_getAllTag(std::vector<Tag> & _return);
  bool insertTag(const std::string& tagName);
  void send_insertTag(const std::string& tagName);
  bool recv_insertTag();
  bool deleteTag(const std::string& tagID);
  void send_deleteTag(const std::string& tagID);
  bool recv_deleteTag();
  bool deleteAllTag(const std::vector<std::string> & tagIDs);
  void send_deleteAllTag(const std::vector<std::string> & tagIDs);
  bool recv_deleteAllTag();
  bool editTag(const std::string& tagID, const std::string& tagName);
  void send_editTag(const std::string& tagID, const std::string& tagName);
  bool recv_editTag();
  void getTag(Tag& _return, const std::string& tagID);
  void send_getTag(const std::string& tagID);
  void recv_getTag(Tag& _return);
  void setViewCountTag(const std::string& tagID);
  void send_setViewCountTag(const std::string& tagID);
  void recv_setViewCountTag();
  void getTopTags(std::vector<Tag> & _return, const int64_t number);
  void send_getTopTags(const int64_t number);
  void recv_getTopTags(std::vector<Tag> & _return);
  void getTagKeyword(std::vector<Tag> & _return, const std::string& keyWord);
  void send_getTagKeyword(const std::string& keyWord);
  void recv_getTagKeyword(std::vector<Tag> & _return);
  void getAllItems(std::vector<Item> & _return, const int64_t number);
  void send_getAllItems(const int64_t number);
  void recv_getAllItems(std::vector<Item> & _return);
  void getItemFromItemID(Item& _return, const std::string& itemID);
  void send_getItemFromItemID(const std::string& itemID);
  void recv_getItemFromItemID(Item& _return);
  void getItemsFromListItemID(std::vector<Item> & _return, const std::vector<std::string> & itemIDs);
  void send_getItemsFromListItemID(const std::vector<std::string> & itemIDs);
  void recv_getItemsFromListItemID(std::vector<Item> & _return);
  void getAllItemshaveTag(std::vector<Item> & _return, const std::string& tagID, const int32_t numberItems);
  void send_getAllItemshaveTag(const std::string& tagID, const int32_t numberItems);
  void recv_getAllItemshaveTag(std::vector<Item> & _return);
  void pagingItemsTag(std::vector<Item> & _return, const std::string& tagID, const int32_t pageNumber, const int32_t numberItems);
  void send_pagingItemsTag(const std::string& tagID, const int32_t pageNumber, const int32_t numberItems);
  void recv_pagingItemsTag(std::vector<Item> & _return);
  void getAllItemsIDhaveTag(std::vector<std::string> & _return, const std::string& tagID, const int32_t numberItemsID);
  void send_getAllItemsIDhaveTag(const std::string& tagID, const int32_t numberItemsID);
  void recv_getAllItemsIDhaveTag(std::vector<std::string> & _return);
  void getRandomItem(Item& _return);
  void send_getRandomItem();
  void recv_getRandomItem(Item& _return);
  void getRandomItemhaveTag(Item& _return, const std::string& tagID);
  void send_getRandomItemhaveTag(const std::string& tagID);
  void recv_getRandomItemhaveTag(Item& _return);
  void increaseViewCountItem(const std::string& itemID);
  void send_increaseViewCountItem(const std::string& itemID);
  void recv_increaseViewCountItem();
  void increaseLikeCountItem(const std::string& itemID);
  void send_increaseLikeCountItem(const std::string& itemID);
  void recv_increaseLikeCountItem();
  void increaseDislikeCountItem(const std::string& itemID);
  void send_increaseDislikeCountItem(const std::string& itemID);
  void recv_increaseDislikeCountItem();
  void insertItem(std::string& _return, const std::string& content, const std::vector<std::string> & tagIDs);
  void send_insertItem(const std::string& content, const std::vector<std::string> & tagIDs);
  void recv_insertItem(std::string& _return);
  bool deleteItem(const std::string& itemID);
  void send_deleteItem(const std::string& itemID);
  bool recv_deleteItem();
  bool deleteAllItem(const std::vector<std::string> & itemIDs);
  void send_deleteAllItem(const std::vector<std::string> & itemIDs);
  bool recv_deleteAllItem();
  bool editItem(const std::string& itemID, const std::string& newItemValue, const std::vector<std::string> & newTagIDs);
  void send_editItem(const std::string& itemID, const std::string& newItemValue, const std::vector<std::string> & newTagIDs);
  bool recv_editItem();
  void getItemsPage(std::vector<Item> & _return, const int64_t pageNumber, const int64_t itemNumber, const std::string& tagID);
  void send_getItemsPage(const int64_t pageNumber, const int64_t itemNumber, const std::string& tagID);
  void recv_getItemsPage(std::vector<Item> & _return);
  void getItemKeyword(std::vector<Item> & _return, const std::string& keyWord);
  void send_getItemKeyword(const std::string& keyWord);
  void recv_getItemKeyword(std::vector<Item> & _return);
  void getItemsPageKeyword(std::vector<Item> & _return, const std::string& keyWord, const int64_t pageNumber, const int64_t itemNumber);
  void send_getItemsPageKeyword(const std::string& keyWord, const int64_t pageNumber, const int64_t itemNumber);
  void recv_getItemsPageKeyword(std::vector<Item> & _return);
  void getItemKeywordTag(std::vector<Item> & _return, const std::string& keyWord, const std::string& tagID);
  void send_getItemKeywordTag(const std::string& keyWord, const std::string& tagID);
  void recv_getItemKeywordTag(std::vector<Item> & _return);
  void getTopItems(std::vector<Item> & _return, const int64_t number);
  void send_getTopItems(const int64_t number);
  void recv_getTopItems(std::vector<Item> & _return);
  void getTopItemsofTag(std::vector<Item> & _return, const int64_t number, const std::string& tagID);
  void send_getTopItemsofTag(const int64_t number, const std::string& tagID);
  void recv_getTopItemsofTag(std::vector<Item> & _return);
  void getFavouriteItems(std::vector<Item> & _return, const std::string& userID, const int64_t number);
  void send_getFavouriteItems(const std::string& userID, const int64_t number);
  void recv_getFavouriteItems(std::vector<Item> & _return);
  void getFavouriteItemsofTag(std::vector<Item> & _return, const std::string& userID, const int64_t number, const std::string& tagID);
  void send_getFavouriteItemsofTag(const std::string& userID, const int64_t number, const std::string& tagID);
  void recv_getFavouriteItemsofTag(std::vector<Item> & _return);
  bool insertFavouriteItem(const std::string& userID, const std::string& itemID);
  void send_insertFavouriteItem(const std::string& userID, const std::string& itemID);
  bool recv_insertFavouriteItem();
  bool deleteFavouriteItem(const std::string& userID, const std::string& itemID);
  void send_deleteFavouriteItem(const std::string& userID, const std::string& itemID);
  bool recv_deleteFavouriteItem();
  void getAllItemsIDLike(std::vector<std::string> & _return, const std::string& userID);
  void send_getAllItemsIDLike(const std::string& userID);
  void recv_getAllItemsIDLike(std::vector<std::string> & _return);
  void getAllItemsLike(std::vector<Item> & _return, const std::string& userID, const int32_t number);
  void send_getAllItemsLike(const std::string& userID, const int32_t number);
  void recv_getAllItemsLike(std::vector<Item> & _return);
  bool insertLikedItem(const std::string& userID, const std::string& itemID);
  void send_insertLikedItem(const std::string& userID, const std::string& itemID);
  bool recv_insertLikedItem();
  bool deleteLikedItem(const std::string& userID, const std::string& itemID);
  void send_deleteLikedItem(const std::string& userID, const std::string& itemID);
  bool recv_deleteLikedItem();
  void getAllItemsIDDislike(std::vector<std::string> & _return, const std::string& userID);
  void send_getAllItemsIDDislike(const std::string& userID);
  void recv_getAllItemsIDDislike(std::vector<std::string> & _return);
  void getAllItemsDislike(std::vector<Item> & _return, const std::string& userID, const int32_t number);
  void send_getAllItemsDislike(const std::string& userID, const int32_t number);
  void recv_getAllItemsDislike(std::vector<Item> & _return);
  bool insertDislikedItem(const std::string& userID, const std::string& itemID);
  void send_insertDislikedItem(const std::string& userID, const std::string& itemID);
  bool recv_insertDislikedItem();
  bool deleteDislikedItem(const std::string& userID, const std::string& itemID);
  void send_deleteDislikedItem(const std::string& userID, const std::string& itemID);
  bool recv_deleteDislikedItem();
  bool userExisted(const std::string& userID);
  void send_userExisted(const std::string& userID);
  bool recv_userExisted();
  bool blockUser(const std::string& userID);
  void send_blockUser(const std::string& userID);
  bool recv_blockUser();
  bool unblockUser(const std::string& userID);
  void send_unblockUser(const std::string& userID);
  bool recv_unblockUser();
  bool addUser(const std::string& userID, const std::string& userToken, const int32_t userRole);
  void send_addUser(const std::string& userID, const std::string& userToken, const int32_t userRole);
  bool recv_addUser();
  bool deleteUser(const std::string& userID);
  void send_deleteUser(const std::string& userID);
  bool recv_deleteUser();
  bool editUser(const std::string& userID, const std::string& userToken, const int32_t userRole);
  void send_editUser(const std::string& userID, const std::string& userToken, const int32_t userRole);
  bool recv_editUser();
  bool deleteAllUser();
  void send_deleteAllUser();
  bool recv_deleteAllUser();
  void getUser(User& _return, const std::string& userID);
  void send_getUser(const std::string& userID);
  void recv_getUser(User& _return);
  void getAllUser(std::vector<std::string> & _return);
  void send_getAllUser();
  void recv_getAllUser(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class BackendMiddlewareProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<BackendMiddlewareIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (BackendMiddlewareProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_itemdbSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_tagdbSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_itemtagdbSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_itemtagSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_userdbSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_itemsLikeSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_itemsDislikeSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_favouriteItemsSize(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAllTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setViewCountTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopTags(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTagKeyword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemFromItemID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemsFromListItemID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemshaveTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pagingItemsTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemsIDhaveTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRandomItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRandomItemhaveTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increaseViewCountItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increaseLikeCountItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_increaseDislikeCountItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAllItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemsPage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemKeyword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemsPageKeyword(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItemKeywordTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTopItemsofTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavouriteItems(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFavouriteItemsofTag(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertFavouriteItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteFavouriteItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemsIDLike(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemsLike(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertLikedItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteLikedItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemsIDDislike(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllItemsDislike(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_insertDislikedItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteDislikedItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_userExisted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_blockUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unblockUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteAllUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  BackendMiddlewareProcessor(boost::shared_ptr<BackendMiddlewareIf> iface) :
    iface_(iface) {
    processMap_["itemdbSize"] = &BackendMiddlewareProcessor::process_itemdbSize;
    processMap_["tagdbSize"] = &BackendMiddlewareProcessor::process_tagdbSize;
    processMap_["itemtagdbSize"] = &BackendMiddlewareProcessor::process_itemtagdbSize;
    processMap_["itemtagSize"] = &BackendMiddlewareProcessor::process_itemtagSize;
    processMap_["userdbSize"] = &BackendMiddlewareProcessor::process_userdbSize;
    processMap_["itemsLikeSize"] = &BackendMiddlewareProcessor::process_itemsLikeSize;
    processMap_["itemsDislikeSize"] = &BackendMiddlewareProcessor::process_itemsDislikeSize;
    processMap_["favouriteItemsSize"] = &BackendMiddlewareProcessor::process_favouriteItemsSize;
    processMap_["getAllTag"] = &BackendMiddlewareProcessor::process_getAllTag;
    processMap_["insertTag"] = &BackendMiddlewareProcessor::process_insertTag;
    processMap_["deleteTag"] = &BackendMiddlewareProcessor::process_deleteTag;
    processMap_["deleteAllTag"] = &BackendMiddlewareProcessor::process_deleteAllTag;
    processMap_["editTag"] = &BackendMiddlewareProcessor::process_editTag;
    processMap_["getTag"] = &BackendMiddlewareProcessor::process_getTag;
    processMap_["setViewCountTag"] = &BackendMiddlewareProcessor::process_setViewCountTag;
    processMap_["getTopTags"] = &BackendMiddlewareProcessor::process_getTopTags;
    processMap_["getTagKeyword"] = &BackendMiddlewareProcessor::process_getTagKeyword;
    processMap_["getAllItems"] = &BackendMiddlewareProcessor::process_getAllItems;
    processMap_["getItemFromItemID"] = &BackendMiddlewareProcessor::process_getItemFromItemID;
    processMap_["getItemsFromListItemID"] = &BackendMiddlewareProcessor::process_getItemsFromListItemID;
    processMap_["getAllItemshaveTag"] = &BackendMiddlewareProcessor::process_getAllItemshaveTag;
    processMap_["pagingItemsTag"] = &BackendMiddlewareProcessor::process_pagingItemsTag;
    processMap_["getAllItemsIDhaveTag"] = &BackendMiddlewareProcessor::process_getAllItemsIDhaveTag;
    processMap_["getRandomItem"] = &BackendMiddlewareProcessor::process_getRandomItem;
    processMap_["getRandomItemhaveTag"] = &BackendMiddlewareProcessor::process_getRandomItemhaveTag;
    processMap_["increaseViewCountItem"] = &BackendMiddlewareProcessor::process_increaseViewCountItem;
    processMap_["increaseLikeCountItem"] = &BackendMiddlewareProcessor::process_increaseLikeCountItem;
    processMap_["increaseDislikeCountItem"] = &BackendMiddlewareProcessor::process_increaseDislikeCountItem;
    processMap_["insertItem"] = &BackendMiddlewareProcessor::process_insertItem;
    processMap_["deleteItem"] = &BackendMiddlewareProcessor::process_deleteItem;
    processMap_["deleteAllItem"] = &BackendMiddlewareProcessor::process_deleteAllItem;
    processMap_["editItem"] = &BackendMiddlewareProcessor::process_editItem;
    processMap_["getItemsPage"] = &BackendMiddlewareProcessor::process_getItemsPage;
    processMap_["getItemKeyword"] = &BackendMiddlewareProcessor::process_getItemKeyword;
    processMap_["getItemsPageKeyword"] = &BackendMiddlewareProcessor::process_getItemsPageKeyword;
    processMap_["getItemKeywordTag"] = &BackendMiddlewareProcessor::process_getItemKeywordTag;
    processMap_["getTopItems"] = &BackendMiddlewareProcessor::process_getTopItems;
    processMap_["getTopItemsofTag"] = &BackendMiddlewareProcessor::process_getTopItemsofTag;
    processMap_["getFavouriteItems"] = &BackendMiddlewareProcessor::process_getFavouriteItems;
    processMap_["getFavouriteItemsofTag"] = &BackendMiddlewareProcessor::process_getFavouriteItemsofTag;
    processMap_["insertFavouriteItem"] = &BackendMiddlewareProcessor::process_insertFavouriteItem;
    processMap_["deleteFavouriteItem"] = &BackendMiddlewareProcessor::process_deleteFavouriteItem;
    processMap_["getAllItemsIDLike"] = &BackendMiddlewareProcessor::process_getAllItemsIDLike;
    processMap_["getAllItemsLike"] = &BackendMiddlewareProcessor::process_getAllItemsLike;
    processMap_["insertLikedItem"] = &BackendMiddlewareProcessor::process_insertLikedItem;
    processMap_["deleteLikedItem"] = &BackendMiddlewareProcessor::process_deleteLikedItem;
    processMap_["getAllItemsIDDislike"] = &BackendMiddlewareProcessor::process_getAllItemsIDDislike;
    processMap_["getAllItemsDislike"] = &BackendMiddlewareProcessor::process_getAllItemsDislike;
    processMap_["insertDislikedItem"] = &BackendMiddlewareProcessor::process_insertDislikedItem;
    processMap_["deleteDislikedItem"] = &BackendMiddlewareProcessor::process_deleteDislikedItem;
    processMap_["userExisted"] = &BackendMiddlewareProcessor::process_userExisted;
    processMap_["blockUser"] = &BackendMiddlewareProcessor::process_blockUser;
    processMap_["unblockUser"] = &BackendMiddlewareProcessor::process_unblockUser;
    processMap_["addUser"] = &BackendMiddlewareProcessor::process_addUser;
    processMap_["deleteUser"] = &BackendMiddlewareProcessor::process_deleteUser;
    processMap_["editUser"] = &BackendMiddlewareProcessor::process_editUser;
    processMap_["deleteAllUser"] = &BackendMiddlewareProcessor::process_deleteAllUser;
    processMap_["getUser"] = &BackendMiddlewareProcessor::process_getUser;
    processMap_["getAllUser"] = &BackendMiddlewareProcessor::process_getAllUser;
  }

  virtual ~BackendMiddlewareProcessor() {}
};

class BackendMiddlewareProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  BackendMiddlewareProcessorFactory(const ::boost::shared_ptr< BackendMiddlewareIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< BackendMiddlewareIfFactory > handlerFactory_;
};

class BackendMiddlewareMultiface : virtual public BackendMiddlewareIf {
 public:
  BackendMiddlewareMultiface(std::vector<boost::shared_ptr<BackendMiddlewareIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~BackendMiddlewareMultiface() {}
 protected:
  std::vector<boost::shared_ptr<BackendMiddlewareIf> > ifaces_;
  BackendMiddlewareMultiface() {}
  void add(boost::shared_ptr<BackendMiddlewareIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t itemdbSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->itemdbSize();
    }
    return ifaces_[i]->itemdbSize();
  }

  int64_t tagdbSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->tagdbSize();
    }
    return ifaces_[i]->tagdbSize();
  }

  int64_t itemtagdbSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->itemtagdbSize();
    }
    return ifaces_[i]->itemtagdbSize();
  }

  int64_t itemtagSize(const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->itemtagSize(tagID);
    }
    return ifaces_[i]->itemtagSize(tagID);
  }

  int64_t userdbSize() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->userdbSize();
    }
    return ifaces_[i]->userdbSize();
  }

  int64_t itemsLikeSize(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->itemsLikeSize(userID);
    }
    return ifaces_[i]->itemsLikeSize(userID);
  }

  int64_t itemsDislikeSize(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->itemsDislikeSize(userID);
    }
    return ifaces_[i]->itemsDislikeSize(userID);
  }

  int64_t favouriteItemsSize(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->favouriteItemsSize(userID);
    }
    return ifaces_[i]->favouriteItemsSize(userID);
  }

  void getAllTag(std::vector<Tag> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllTag(_return);
    }
    ifaces_[i]->getAllTag(_return);
    return;
  }

  bool insertTag(const std::string& tagName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertTag(tagName);
    }
    return ifaces_[i]->insertTag(tagName);
  }

  bool deleteTag(const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteTag(tagID);
    }
    return ifaces_[i]->deleteTag(tagID);
  }

  bool deleteAllTag(const std::vector<std::string> & tagIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAllTag(tagIDs);
    }
    return ifaces_[i]->deleteAllTag(tagIDs);
  }

  bool editTag(const std::string& tagID, const std::string& tagName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editTag(tagID, tagName);
    }
    return ifaces_[i]->editTag(tagID, tagName);
  }

  void getTag(Tag& _return, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTag(_return, tagID);
    }
    ifaces_[i]->getTag(_return, tagID);
    return;
  }

  void setViewCountTag(const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setViewCountTag(tagID);
    }
    ifaces_[i]->setViewCountTag(tagID);
  }

  void getTopTags(std::vector<Tag> & _return, const int64_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTopTags(_return, number);
    }
    ifaces_[i]->getTopTags(_return, number);
    return;
  }

  void getTagKeyword(std::vector<Tag> & _return, const std::string& keyWord) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTagKeyword(_return, keyWord);
    }
    ifaces_[i]->getTagKeyword(_return, keyWord);
    return;
  }

  void getAllItems(std::vector<Item> & _return, const int64_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItems(_return, number);
    }
    ifaces_[i]->getAllItems(_return, number);
    return;
  }

  void getItemFromItemID(Item& _return, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemFromItemID(_return, itemID);
    }
    ifaces_[i]->getItemFromItemID(_return, itemID);
    return;
  }

  void getItemsFromListItemID(std::vector<Item> & _return, const std::vector<std::string> & itemIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemsFromListItemID(_return, itemIDs);
    }
    ifaces_[i]->getItemsFromListItemID(_return, itemIDs);
    return;
  }

  void getAllItemshaveTag(std::vector<Item> & _return, const std::string& tagID, const int32_t numberItems) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemshaveTag(_return, tagID, numberItems);
    }
    ifaces_[i]->getAllItemshaveTag(_return, tagID, numberItems);
    return;
  }

  void pagingItemsTag(std::vector<Item> & _return, const std::string& tagID, const int32_t pageNumber, const int32_t numberItems) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pagingItemsTag(_return, tagID, pageNumber, numberItems);
    }
    ifaces_[i]->pagingItemsTag(_return, tagID, pageNumber, numberItems);
    return;
  }

  void getAllItemsIDhaveTag(std::vector<std::string> & _return, const std::string& tagID, const int32_t numberItemsID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemsIDhaveTag(_return, tagID, numberItemsID);
    }
    ifaces_[i]->getAllItemsIDhaveTag(_return, tagID, numberItemsID);
    return;
  }

  void getRandomItem(Item& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRandomItem(_return);
    }
    ifaces_[i]->getRandomItem(_return);
    return;
  }

  void getRandomItemhaveTag(Item& _return, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRandomItemhaveTag(_return, tagID);
    }
    ifaces_[i]->getRandomItemhaveTag(_return, tagID);
    return;
  }

  void increaseViewCountItem(const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increaseViewCountItem(itemID);
    }
    ifaces_[i]->increaseViewCountItem(itemID);
  }

  void increaseLikeCountItem(const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increaseLikeCountItem(itemID);
    }
    ifaces_[i]->increaseLikeCountItem(itemID);
  }

  void increaseDislikeCountItem(const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increaseDislikeCountItem(itemID);
    }
    ifaces_[i]->increaseDislikeCountItem(itemID);
  }

  void insertItem(std::string& _return, const std::string& content, const std::vector<std::string> & tagIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertItem(_return, content, tagIDs);
    }
    ifaces_[i]->insertItem(_return, content, tagIDs);
    return;
  }

  bool deleteItem(const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteItem(itemID);
    }
    return ifaces_[i]->deleteItem(itemID);
  }

  bool deleteAllItem(const std::vector<std::string> & itemIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAllItem(itemIDs);
    }
    return ifaces_[i]->deleteAllItem(itemIDs);
  }

  bool editItem(const std::string& itemID, const std::string& newItemValue, const std::vector<std::string> & newTagIDs) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editItem(itemID, newItemValue, newTagIDs);
    }
    return ifaces_[i]->editItem(itemID, newItemValue, newTagIDs);
  }

  void getItemsPage(std::vector<Item> & _return, const int64_t pageNumber, const int64_t itemNumber, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemsPage(_return, pageNumber, itemNumber, tagID);
    }
    ifaces_[i]->getItemsPage(_return, pageNumber, itemNumber, tagID);
    return;
  }

  void getItemKeyword(std::vector<Item> & _return, const std::string& keyWord) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemKeyword(_return, keyWord);
    }
    ifaces_[i]->getItemKeyword(_return, keyWord);
    return;
  }

  void getItemsPageKeyword(std::vector<Item> & _return, const std::string& keyWord, const int64_t pageNumber, const int64_t itemNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemsPageKeyword(_return, keyWord, pageNumber, itemNumber);
    }
    ifaces_[i]->getItemsPageKeyword(_return, keyWord, pageNumber, itemNumber);
    return;
  }

  void getItemKeywordTag(std::vector<Item> & _return, const std::string& keyWord, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItemKeywordTag(_return, keyWord, tagID);
    }
    ifaces_[i]->getItemKeywordTag(_return, keyWord, tagID);
    return;
  }

  void getTopItems(std::vector<Item> & _return, const int64_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTopItems(_return, number);
    }
    ifaces_[i]->getTopItems(_return, number);
    return;
  }

  void getTopItemsofTag(std::vector<Item> & _return, const int64_t number, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTopItemsofTag(_return, number, tagID);
    }
    ifaces_[i]->getTopItemsofTag(_return, number, tagID);
    return;
  }

  void getFavouriteItems(std::vector<Item> & _return, const std::string& userID, const int64_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavouriteItems(_return, userID, number);
    }
    ifaces_[i]->getFavouriteItems(_return, userID, number);
    return;
  }

  void getFavouriteItemsofTag(std::vector<Item> & _return, const std::string& userID, const int64_t number, const std::string& tagID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFavouriteItemsofTag(_return, userID, number, tagID);
    }
    ifaces_[i]->getFavouriteItemsofTag(_return, userID, number, tagID);
    return;
  }

  bool insertFavouriteItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertFavouriteItem(userID, itemID);
    }
    return ifaces_[i]->insertFavouriteItem(userID, itemID);
  }

  bool deleteFavouriteItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteFavouriteItem(userID, itemID);
    }
    return ifaces_[i]->deleteFavouriteItem(userID, itemID);
  }

  void getAllItemsIDLike(std::vector<std::string> & _return, const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemsIDLike(_return, userID);
    }
    ifaces_[i]->getAllItemsIDLike(_return, userID);
    return;
  }

  void getAllItemsLike(std::vector<Item> & _return, const std::string& userID, const int32_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemsLike(_return, userID, number);
    }
    ifaces_[i]->getAllItemsLike(_return, userID, number);
    return;
  }

  bool insertLikedItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertLikedItem(userID, itemID);
    }
    return ifaces_[i]->insertLikedItem(userID, itemID);
  }

  bool deleteLikedItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteLikedItem(userID, itemID);
    }
    return ifaces_[i]->deleteLikedItem(userID, itemID);
  }

  void getAllItemsIDDislike(std::vector<std::string> & _return, const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemsIDDislike(_return, userID);
    }
    ifaces_[i]->getAllItemsIDDislike(_return, userID);
    return;
  }

  void getAllItemsDislike(std::vector<Item> & _return, const std::string& userID, const int32_t number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllItemsDislike(_return, userID, number);
    }
    ifaces_[i]->getAllItemsDislike(_return, userID, number);
    return;
  }

  bool insertDislikedItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->insertDislikedItem(userID, itemID);
    }
    return ifaces_[i]->insertDislikedItem(userID, itemID);
  }

  bool deleteDislikedItem(const std::string& userID, const std::string& itemID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteDislikedItem(userID, itemID);
    }
    return ifaces_[i]->deleteDislikedItem(userID, itemID);
  }

  bool userExisted(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->userExisted(userID);
    }
    return ifaces_[i]->userExisted(userID);
  }

  bool blockUser(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->blockUser(userID);
    }
    return ifaces_[i]->blockUser(userID);
  }

  bool unblockUser(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unblockUser(userID);
    }
    return ifaces_[i]->unblockUser(userID);
  }

  bool addUser(const std::string& userID, const std::string& userToken, const int32_t userRole) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(userID, userToken, userRole);
    }
    return ifaces_[i]->addUser(userID, userToken, userRole);
  }

  bool deleteUser(const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteUser(userID);
    }
    return ifaces_[i]->deleteUser(userID);
  }

  bool editUser(const std::string& userID, const std::string& userToken, const int32_t userRole) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editUser(userID, userToken, userRole);
    }
    return ifaces_[i]->editUser(userID, userToken, userRole);
  }

  bool deleteAllUser() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteAllUser();
    }
    return ifaces_[i]->deleteAllUser();
  }

  void getUser(User& _return, const std::string& userID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUser(_return, userID);
    }
    ifaces_[i]->getUser(_return, userID);
    return;
  }

  void getAllUser(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllUser(_return);
    }
    ifaces_[i]->getAllUser(_return);
    return;
  }

};

} // namespace

#endif
